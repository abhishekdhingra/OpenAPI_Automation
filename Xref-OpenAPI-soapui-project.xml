<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="310655c3-055c-465c-873e-a96f30b8d768" activeEnvironment="Default" name="Xref_OpenAPI" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:testSuite name="Driver_TestSuite" id="ec4571a5-a31d-4fbc-bd1a-0f1bd1e3009a"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="95202e94-783d-479d-8855-46da708ee26c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Driver_TestCase" searchProperties="true"><con:settings/><con:testStep type="properties" name="Testcase_Variables" id="170432d1-c07e-4644-aaae-27e70146cad0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" discardValuesOnSave="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties/></con:config></con:testStep><con:testStep type="properties" name="Global_Variables" id="5dac1f80-d134-40c3-88f5-d149b8e67127"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Folder_Path</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>TestsuiteName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>TestSuiteFilePath</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>TestcaseName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>JWT_Token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>Log_FilePath</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>Database_Server</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>Database_Port</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>Database_Name</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>Database_Username</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>Database_Password</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>Company_ID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>Overall_TestcaseStatus</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>Environment</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>User_Id</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>Password</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>Stop_Execution</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>Error_TestcaseName</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Initialize_Driver" id="1de6348d-26de-40e0-90da-5de71da3a6f8"><con:settings/><con:config><script><![CDATA[import javax.swing.JOptionPane;
//****************Reference to Different test Suite/testcase/teststep****************************
try{
	def groovyUtils=new  com.eviware.soapui.support.GroovyUtils(context)
	// Using the method projectPath you can get the project path which you are working
	def projectPath = groovyUtils.projectPath
	def strExcelReadPath =projectPath+"/excelFiles";
	def strResultFolderPath =projectPath+"/Run_Results";
	reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
	def excelInteractionModule_TestStep = reusableLibraries_TestCase.getTestStepByName("Excel_Interaction")
	def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
	def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
	def localFileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables")
	def fileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Global_Variables")
	localFileProperties.clearPropertyValues();
	fileProperties.clearPropertyValues();
	//--Define the external string object	
	def properties = new com.eviware.soapui.support.types.StringToObjectMap ()
	def async = false
	
	//Call and initialize the objects of Reusable Library classes
	excelInteractionModule_TestStep.run(testRunner, context)
	def objExcelInteraction = context.objExcelInteraction
	utilityFunctions_TestStep.run(testRunner, context)
	def objUtilityFunctions = context.objUtilityFunctions
	reportingLogFunctions_TestStep.run(testRunner, context)
	def objReportingLog=context.objReportingLog;
	objReportingLog.createRunResultFolder(strResultFolderPath)
	
	//******************Call function in Excel Interaction Testcase class to get sheet name************
	String[][] strTestSuitesArray=objExcelInteraction.fetchInputDatafromExcel(strExcelReadPath+"/TestSuiteList.xlsx","Test_Suites")
	int intTSRowCount=strTestSuitesArray.length;
	int iSuite,intTestCaseExecuted=0;
	def strTestSuiteSheetPath,strTestCaseName,strTestSuiteName;
	for(iSuite=1;iSuite<intTSRowCount;iSuite++){
		if(!(strTestSuitesArray[iSuite][1].trim()).equalsIgnoreCase("Yes")){
			objExcelInteraction.writeTestCaseResult(strExcelReadPath+"/TestSuiteList.xlsx","Test_Suites",strTestSuitesArray[iSuite][0].trim(), "Skipped/Executed","Skipped");
			continue;	
		}
		objExcelInteraction.fetchEnvDetails(strTestSuitesArray[iSuite][2].trim(),fileProperties,strExcelReadPath+"/TestSuiteList.xlsx","Database_Details");
		objExcelInteraction.writeTestCaseResult(strExcelReadPath+"/TestSuiteList.xlsx","Test_Suites",strTestSuitesArray[iSuite][0].trim(), "Skipped/Executed","Executed");
		strTestSuiteName=fileProperties.getPropertyValue("TestsuiteName");
		fileProperties.setPropertyValue("TestsuiteName",strTestSuitesArray[iSuite][0]);
		strTestSuiteName=strTestSuitesArray[iSuite][0];
		strTestSuiteSheetPath=strExcelReadPath+"/"+strTestSuitesArray[iSuite][0]+"/"+strTestSuitesArray[iSuite][0].trim()+".xlsx"
		fileProperties.setPropertyValue("TestSuiteFilePath", strTestSuiteSheetPath);
		objReportingLog.createTestResultFolderStructure();
		objExcelInteraction.updateResultPathInTestSuiteFile("Result_Path",strTestSuiteName, strExcelReadPath+"/TestSuiteList.xlsx", fileProperties.getPropertyValue("Folder_Path"))
		String[][] strDPSheetArray=objExcelInteraction.fetchInputDatafromExcel(strTestSuiteSheetPath,"TestCases")
		int dpColumnCount = strDPSheetArray[0].length, dpRowCount=strDPSheetArray.length -1;
		//*****Call function getColumnNumber_ForColumnName to get column number for runFlag column*********
		def intColumnNumFlag=objExcelInteraction.getColumnNumber_ForColumnName("RunFlag",strDPSheetArray)
		def intColumnNumTestCase=objExcelInteraction.getColumnNumber_ForColumnName("Testcase_Name",strDPSheetArray)
		//Logic to store the data input in LocalFileProperties file
		int itr;
		def resultFolderTestSuitePath=fileProperties.getPropertyValue("Folder_Path")+"/"+strTestSuiteName+"/"+strTestSuiteName+".xlsx"
		for(itr=1; itr<= dpRowCount ;itr++){
			fileProperties.setPropertyValue("Overall_TestcaseStatus","");
			//Set the property value of Serial Number for every iteration
			strTestCaseName=strDPSheetArray[itr][intColumnNumTestCase].trim();
			if(!(strDPSheetArray[itr][intColumnNumFlag].trim()).equalsIgnoreCase("Yes")){
				objExcelInteraction.writeTestCaseResult(resultFolderTestSuitePath,"TestCases",strTestCaseName, "Status","Skipped");	
				continue;				
			}
			fileProperties.setPropertyValue("TestcaseName",strTestCaseName);
			String[][] strDataSetSheetArray=objExcelInteraction.fetchInputDatafromExcel(strTestSuiteSheetPath,strTestCaseName);
			int intColumnCount = strDataSetSheetArray[0].length, intRowCount=strDataSetSheetArray.length -1;
			//*****Call function getColumnNumber_ForColumnName to get column number for runFlag column*********
			def intDSColumnNumFlag=objExcelInteraction.getColumnNumber_ForColumnName("RunFlag",strDataSetSheetArray)
			int iDataSet;
			boolean blnDataEndPointSet=false;
			for(iDataSet=1;iDataSet<=intRowCount;iDataSet++){
				if(!(strDataSetSheetArray[iDataSet][intDSColumnNumFlag].trim()).equalsIgnoreCase("Yes")){
					objExcelInteraction.writeTestDataIterationResult(resultFolderTestSuitePath,strTestCaseName, "Status", iDataSet, "Skipped");	
					continue;				
				}
				localFileProperties.setPropertyValue("Testcase_Status",null)	
				for(int rowDSItr =0; rowDSItr < intColumnCount; rowDSItr++){
					if(strDataSetSheetArray[0][rowDSItr].equalsIgnoreCase("JWT_Token")){
						if(strDataSetSheetArray[iDataSet][rowDSItr]!=null && fileProperties.getPropertyValue("JWT_Token")==null){
							fileProperties.setPropertyValue("JWT_Token",strDataSetSheetArray[iDataSet][rowDSItr]);
						}
					}
					localFileProperties.setPropertyValue(strDataSetSheetArray[0][rowDSItr], strDataSetSheetArray[iDataSet][rowDSItr]);
				}
				localFileProperties.setPropertyValue("Dataset",iDataSet.toString());
				localFileProperties.setPropertyValue("Error",null);
				intTestCaseExecuted=intTestCaseExecuted+1;
				objReportingLog.logInfo("","\n######################## Test Case: "+strTestCaseName+" - DataSet: "+iDataSet+" ##########################");
				def testCase = testRunner.testCase.testSuite.project.getTestSuiteByName(strTestSuitesArray[iSuite][0].trim()).getTestCaseByName(strTestCaseName);
				if(blnDataEndPointSet==false){
					def testSteps = testRunner.testCase.testSuite.project.testSuites[strTestSuitesArray[iSuite][0].trim()].testCases[strTestCaseName].getTestStepList();
					for(int intCount=0; intCount<testSteps.size();intCount++){
						if((testSteps.get(intCount).config.type).contains("request")){
							localFileProperties.setPropertyValue("Request_Name",testSteps.get(intCount).name);
							objUtilityFunctions.setEndPoint_HeaderForRequests(testSteps.get(intCount),objExcelInteraction,strTestSuiteSheetPath,"REQUEST_ENDPOINTS",testSteps.get(intCount).name);	
							blnDataEndPointSet=true;
						}
					}
				}
				//localFileProperties.setPropertyValue("Dataset",iDataSet.toString());
				testCase.run (properties, async);				
				def strResponseContent,strRequestName;
				strResponseContent=localFileProperties.getPropertyValue("Json_Response");
				if(strResponseContent!=null){
					strRequestName=localFileProperties.getPropertyValue("Request_Name");
					if(localFileProperties.getPropertyValue("Testcase_Status").equals("Failed")){
						objReportingLog.createTestCaseFolderAndResponseFile("Fail",strResponseContent,strRequestName,iDataSet.toString());
						objExcelInteraction.writeTestDataIterationResult(resultFolderTestSuitePath,strTestCaseName, "Status", iDataSet, "Failed");
						objReportingLog.logInfo("","###################### TestCase- "+strTestCaseName+" DATASET-"+iDataSet+" is FAILED ######################" ) 
						fileProperties.setPropertyValue("Overall_TestcaseStatus","Failed");
						
					}else{
						objReportingLog.createTestCaseFolderAndResponseFile("Pass",strResponseContent,strRequestName,iDataSet.toString());
						objExcelInteraction.writeTestDataIterationResult(resultFolderTestSuitePath,strTestCaseName, "Status", iDataSet, "Passed");
						objReportingLog.logInfo("","###################### TestCase- "+strTestCaseName+" DATASET-"+iDataSet+" is PASSED ######################" ) 
					}
				}
			}
			if(fileProperties.getPropertyValue("Overall_TestcaseStatus").equals("Failed")){
				objExcelInteraction.writeTestCaseResult(resultFolderTestSuitePath,"TestCases",strTestCaseName, "Status","Failed");	
			}else{
				objExcelInteraction.writeTestCaseResult(resultFolderTestSuitePath,"TestCases",strTestCaseName, "Status","Passed");	
			}
			objUtilityFunctions.removePropertyName_Value(localFileProperties);
			if(fileProperties.getPropertyValue("Stop_Execution").equals("Yes")){
					fileProperties.clearPropertyValues();
					throw new Exception("Execution Stopped as input credentials could NOT be validated")	
			}
		}
	}
	if(iSuite == intTSRowCount){
		//localFileProperties.clearPropertyValues();
		fileProperties.clearPropertyValues();
		if(intTestCaseExecuted==0){
			JOptionPane.showMessageDialog(null,"No Test cases were NOT executed since the RunFlag value in input sheet is NO for TestSuite/TestCase","Completed",JOptionPane.INFORMATION_MESSAGE);
		}else{
			JOptionPane.showMessageDialog(null,"Execution Completed","Completed",JOptionPane.INFORMATION_MESSAGE);
		}
	}
}catch (Exception e){
	try{
		localFileProperties.clearPropertyValues();
		fileProperties.clearPropertyValues();
	}catch(Exception ex){	
	}
	JOptionPane.showMessageDialog(null,"Error Found:\n"+e.getMessage(),"Completed",JOptionPane.INFORMATION_MESSAGE);
	throw new Exception("Exception occurred....!!!! "+e.getMessage());
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>userName</con:name><con:value>AB</con:value></con:property><con:property><con:name>password</con:name><con:value>D</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="1487bc5c-e00d-4b31-b4c5-18d6f8748386" name="Reusable_Libraries"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="88b716b8-ddac-40c9-8368-fd7a8998e4f9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reusable_Functions" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Excel_Interaction" id="e0fe293d-ebfa-49b1-bfab-1dc8b9e964a0"><con:settings/><con:config><script><![CDATA[import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Hyperlink;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;

public class Excel_Interaction
{
	def log
	def context
	def testRunner
	
     //Constructor of Class Excel_Interaction
     def Excel_Interaction(logIn, contextIn, testRunnerIn)
	{
	 this.log = logIn
	 this.context = contextIn
	 this.testRunner = testRunnerIn
	}
	/*
	###############################################################################
	Function name:  fetchInputDatafromExcel()
	Description  :  To Fetch the data input by the user in the data input sheet
	Parameters   :	 strExcelReadPath,strExcelSheetName
	Return Value :  dpSheetArray[][]
	###############################################################################
	*/ 
	String[][] fetchInputDatafromExcel(String strExcelReadPath,String strExcelSheetName){
			//Read Data from Xlsx File
			File file = new File(strExcelReadPath);
			FileInputStream inputStream = new FileInputStream(file);
		try{
			//Create a Workbook object
			Workbook workbook = new XSSFWorkbook(inputStream);
			//Create an object of Sheet
			Sheet sheet = workbook.getSheet(strExcelSheetName);
			//Fetch Row count
			int rowCount = sheet.getLastRowNum();
			//Fetch Column count for the rows
			int columnCount =  sheet.getRow(0).getLastCellNum();
			String[][] dpSheetArray = new String[rowCount+1][columnCount];
			for (int i=0; i<=rowCount; i++){
				Row row = sheet.getRow(i);
				for (int j=0; j<row.getLastCellNum(); j++){
					XSSFCell dpCell = row.getCell(j);
					try{
						//Switch case to check the data type input in the excel
						switch(dpCell.getCellType()){
							case 0 :
							dpSheetArray[i][j] = ((int)dpCell.getNumericCellValue()).toString();
							break;	
							case 1 :
							dpSheetArray[i][j] = dpCell.getStringCellValue();
							break;
							}
						}catch(Exception e){	
					}
				}
			}
			return dpSheetArray;
		}catch(Exception e){
			def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","fetchInputDatafromExcel-> Excel Input Data NOT fetched correctly.\nException caught: "+e.getMessage());
			throw new Exception("fetchInputDatafromExcel-> Excel Input Data NOT fetched correctly.\nException caught: "+e.getMessage());
		}
	}
	/*
	###############################################################################
	Function name:  getColumnNumber_ForColumnName()
	Description  :  To Fetch the column number for a particular column name 
	Parameters   :	 strColumnName,strDPSheetArray
	Return Value :  itrCol
	###############################################################################
	*/ 
	 def getColumnNumber_ForColumnName(String strColumnName,String[][] strDPSheetArray){
	 	try{
	 		int intDPColumnCount = strDPSheetArray[0].length;
	 		for(int itrCol=0; itrCol<intDPColumnCount; itrCol++){
	 			if((strDPSheetArray[0][itrCol].trim()).equalsIgnoreCase(strColumnName)){
	 				return itrCol;
	 				break;
	 			}
	 		}
	 		if((itrCol).equals(intDPColumnCount)){
	 			throw new Exception("Column name "+strColumnName+" was NOT fetched correctly");
	 		}
	 	}catch(Exception e){
	 		def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","getColumnNumber_ForColumnName-> Column name "+strColumnName+" was NOT fetched correctly.\nException caught: "+e.getMessage());
			throw new Exception("getColumnNumber_ForColumnName-> Column name "+strColumnName+" was NOT fetched correctly.\nException caught: "+e.getMessage());
	 	}
	 	
	 }
	/*
	###############################################################################
	Function name:  writeTestCaseResult
	Description  :  To write result In test suite list sheet
	Parameters   :	 strExcelWritePath,wsName,strTestSuiteName,colName,Result
	Return Value :  Null
	###############################################################################
	*/ 
  	public void writeTestCaseResult(String strExcelWritePath,String wsName,String strTestSuiteName, String colName, String Result) {
  		try{
  			//Create a object of File class to open xlsx file
    			File file = new File(strExcelWritePath);
			//Create an object of FileInputStream class to read excel file
	 		FileInputStream inputStream = new FileInputStream(file);
	 		//Create a Workbook object
			Workbook workbook = new XSSFWorkbook(inputStream);
	 		Sheet sheet = workbook.getSheet(wsName);
  			int rowNum = sheet.getLastRowNum();
  			int rowNumber=-1;
  			int sheetIndex=workbook.getSheetIndex(wsName);
  			if(sheetIndex==-1)
  				throw Exception("Sheet name "+wsName+" is NOT found in Excel Sheet-"+strExcelWritePath);	

			Row firstRow = sheet.getRow(0);
		  	int colNum=firstRow.getLastCellNum();
  			int colNumber=-1;
  			Row Suiterow = sheet.getRow(0);	
  			for(int i=0; i<colNum; i++){				
  				if(Suiterow.getCell(i).getStringCellValue().equalsIgnoreCase(colName.trim())){
  					colNumber=i;
  					break;
  				}					
  			}
  			if(colNumber==-1 && wsName!="Test_Suites"){
  				XSSFFont boldFont = workbook.createFont();
  				boldFont.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD); //Setting Bold font
  				XSSFCellStyle boldStyle = workbook.createCellStyle();
  				boldStyle.setFont(boldFont); //Attaching the font to the Style
  				boldStyle.setFillForegroundColor(sheet.getRow(0).getCell(1).getCellStyle().getFillForegroundXSSFColor());
  				boldStyle.setFillPattern(XSSFCellStyle.SOLID_FOREGROUND);
  				Cell createdcell=Suiterow.createCell(colNum);
  				createdcell.setCellValue("Status");	
  				createdcell.setCellStyle(boldStyle); //Applying Style to the Cell.
  				colNumber=colNum;
  			}
  			for (int i=0; i<rowNum; i++){
  				XSSFRow row = sheet.getRow(i+1);				
  				XSSFCell cell = row.getCell(0);	
  				cell.setCellType(Cell.CELL_TYPE_STRING);
  				String value = cell.getStringCellValue();
  				if(value.equalsIgnoreCase(strTestSuiteName)){
  					rowNumber=i+1;
  					break;
  				}
  			}		
  			XSSFRow Row = sheet.getRow(rowNumber);
  			XSSFCell cell = Row.getCell(colNumber);
  			if (cell == null)
  		        cell = Row.createCell(colNumber);			

  			cell.setCellValue(Result.toUpperCase().toString());
  			XSSFCellStyle style = workbook.createCellStyle();
  			style.setBorderBottom((short) 1);
  			style.setBorderTop((short) 1);
  			style.setBorderLeft((short) 1);
  			style.setBorderRight((short) 1);
  			XSSFFont font= workbook.createFont();
  			font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);
  			if(Result.equalsIgnoreCase("FAILED")){
  				style.setFillForegroundColor(IndexedColors.MAROON.getIndex());
  			}else if(Result.equalsIgnoreCase("SKIPPED")){
  				if( wsName=="Test_Suites"){
  					Row.getCell(colNumber+1).setCellValue("")
  				}
  				style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
  			}else if((Result.equalsIgnoreCase("PASSED")) || (Result.equalsIgnoreCase("EXECUTED"))){
  				style.setFillForegroundColor(IndexedColors.LIGHT_GREEN.getIndex());
  			}
  			style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
  			style.setFont(font); 
  			cell.setCellStyle(style);
  			FileOutputStream outputstream = new FileOutputStream(file);
  			workbook.write(outputstream);
  			outputstream.close();
   		}catch(Exception e){
   			def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","writeTestCaseResult-> Write testcase result failed for arguments-"  +strExcelWritePath +" "+wsName +" "+strTestSuiteName+" "+colName+" "+Result+".\nException caught: "+e.getMessage());
  			throw new Exception("writeTestCaseResult-> Write testcase result failed for arguments-"  +strExcelWritePath +" "+wsName +" "+strTestSuiteName+" "+colName+" "+Result+".\nException caught: "+e.getMessage());
  		}
  	}
	/*
	###############################################################################
	Function name:  writeTestDataIterationResult
	Description  :  To write result for test case data iteration
	Parameters   :	 strExcelWritePath,wsName,colName,intRow,Result
	Return Value :  Null
	###############################################################################
	*/ 
	public void writeTestDataIterationResult(String strExcelWritePath,String wsName, String colName, int intRow, String Result) {
  		try{
			//Create a object of File class to open xlsx file
    			File file = new File(strExcelWritePath);
			//Create an object of FileInputStream class to read excel file
	 		FileInputStream inputStream = new FileInputStream(file);
	 		//Create a Workbook object
			Workbook workbook = new XSSFWorkbook(inputStream);
	 		Sheet sheet = workbook.getSheet(wsName);
  			int rowNum = sheet.getLastRowNum();
  			int rowNumber=-1;
  			int sheetIndex=workbook.getSheetIndex(wsName);
  			if(sheetIndex==-1)
  				throw Exception("Sheet name "+wsName+" is NOT found in Excel Sheet-"+strExcelWritePath)

			Row firstRow = sheet.getRow(0);
		  	int colNum=firstRow.getLastCellNum();
  			int colNumber=-1;
  			Row Suiterow = sheet.getRow(0);	
  			for(int i=0; i<colNum; i++){				
  				if(Suiterow.getCell(i).getStringCellValue().equals(colName.trim())){
  					colNumber=i;
  					break;
  				}					
  			}
  			if(colNumber==-1 ){
  				XSSFFont boldFont = workbook.createFont();
  				boldFont.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD); //Setting Bold font
  				XSSFCellStyle boldStyle = workbook.createCellStyle();
  				boldStyle.setFont(boldFont); //Attaching the font to the Style
				boldStyle.setFillForegroundColor(sheet.getRow(0).getCell(1).getCellStyle().getFillForegroundXSSFColor());
  				boldStyle.setFillPattern(XSSFCellStyle.SOLID_FOREGROUND);
  				Cell createdcell=Suiterow.createCell(colNum);
  				createdcell.setCellValue("Status");
  				createdcell.setCellStyle(boldStyle); //Applying Style to the Cell
  				colNumber=colNum;
  			}
  			Row row = sheet.getRow(intRow);
  			Cell cell = row.getCell(colNumber);
  			if (cell == null)
  		        cell = row.createCell(colNumber);			
  			
  			cell.setCellValue(Result.toUpperCase());
  			XSSFCellStyle style = workbook.createCellStyle();
  			style.setBorderBottom((short) 1);
  			style.setBorderTop((short) 1);
  			style.setBorderLeft((short) 1);
  			style.setBorderRight((short) 1);
  			XSSFFont font= workbook.createFont();
  			font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);
  			if(Result.equalsIgnoreCase("FAILED")){
  				style.setFillForegroundColor(IndexedColors.MAROON.getIndex());
  			}else if(Result.equalsIgnoreCase("SKIPPED")){
  				style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
  			}else if((Result.equalsIgnoreCase("PASSED"))){
  				style.setFillForegroundColor(IndexedColors.LIGHT_GREEN.getIndex());
  			}
  			style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
  			style.setFont(font); 
  			cell.setCellStyle(style);
  			FileOutputStream outputstream = new FileOutputStream(file);
  			workbook.write(outputstream);
  			outputstream.close();
   		}catch(Exception e){
   			def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","writeTestDataIterationResult-> Write test data iteration result failed for arguments-"  +strExcelWritePath +" "+wsName +" "+strTestSuiteName+" "+intRow+" "+Result+".\nException caught: "+e.getMessage());
  			throw new Exception("writeTestDataIterationResult-> Write test data iteration result failed for arguments-"  +strExcelWritePath +" "+wsName +" "+strTestSuiteName+" "+intRow+" "+Result+".\nException caught: "+e.getMessage());
  		}
  	}
	/*
	###############################################################################
	Function name:  updateResultPathInTestSuiteFile
	Description  :  To update run result path in test suite file
 	Parameters   :	 colName,strTestSuiteName,strtestSuiteFilePath,strResultFolderPath
	Return Value :  Null
	###############################################################################
	*/ 
  	public void updateResultPathInTestSuiteFile(String colName, String strTestSuiteName, String strtestSuiteFilePath, String strResultFolderPath) throws Exception{

  		try{
  			def intSuiteRowNumber;
	  		File file = new File(strtestSuiteFilePath);
			FileInputStream inputStream = new FileInputStream(file);
			//Create a Workbook object
			Workbook workbook = new XSSFWorkbook(inputStream);
			//Create an object of Sheet
			Sheet sheet = workbook.getSheet("Test_Suites");
	  		Row firstRow = sheet.getRow(0);
			int colNum=firstRow.getLastCellNum();
			int colNumber=-1;
			XSSFRow Suiterow = sheet.getRow(0);			
			for(int i=0; i<colNum; i++){				
				if(Suiterow.getCell(i).getStringCellValue().equals(colName.trim())){
					colNumber=i;
					break;
				}					
			}
			for(int iRow=0; iRow<=sheet.getLastRowNum();iRow++){
				if(sheet.getRow(iRow).getCell(0).getStringCellValue().equalsIgnoreCase(strTestSuiteName)){
					intSuiteRowNumber=iRow;
					break;
				}
				
			}
		    CreationHelper createHelper = workbook.getCreationHelper();
		    CellStyle hlink_style = workbook.createCellStyle();
		    Font hlink_font = workbook.createFont();
		    hlink_font.setUnderline(Font.U_SINGLE);
		    hlink_font.setColor(IndexedColors.BLUE.getIndex());
		    hlink_style.setFont(hlink_font);
		    XSSFRow Row = sheet.getRow(intSuiteRowNumber);
		    XSSFCell cell = Row.getCell(colNumber);
			
			if (cell == null)
		        cell = Row.createCell(colNumber);			
			
		    cell.setCellValue(strResultFolderPath);
		    Hyperlink link = createHelper.createHyperlink(Hyperlink.LINK_FILE);
		    link.setAddress(strResultFolderPath);
		    cell.setHyperlink(link);
		    cell.setCellStyle(hlink_style);
		    FileOutputStream outputstream = new FileOutputStream(file);
		    workbook.write(outputstream);
		    outputstream.close();	
  		}catch(Exception e){
   			def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","updateResultPathInTestSuiteFile-> Update test uite path in TestSuite_List excel file failed for arguments-"  +strExcelWritePath +" "+wsName +" "+strTestSuiteName+" "+intRow+" "+Result+".\nException caught: "+e.getMessage());
  			throw new Exception("updateResultPathInTestSuiteFile-> Update test uite path in TestSuite_List excel file failed for arguments-"  +strExcelWritePath +" "+wsName +" "+strTestSuiteName+" "+intRow+" "+Result+".\nException caught: "+e.getMessage());
  		}
  		
  	}
	/*
	###############################################################################
	Function name:  fetchColumnNamefromExcel()
	Description  :  To Fetch the column name from excel sheet
 	Parameters   :	 strExcelReadPath,strExcelSheetName
	Return Value :  dpSheetArray[][]
	###############################################################################
	*/  
	String[] fetchColumnNamefromExcel(String strExcelReadPath,String strExcelSheetName){
		try{
			//Read Data from Xlsx File
			File file = new File(strExcelReadPath);
			FileInputStream inputStream = new FileInputStream(file);
		
			//Create a Workbook object
			Workbook workbook = new XSSFWorkbook(inputStream);
			//Create an object of Sheet
			Sheet sheet = workbook.getSheet(strExcelSheetName);
			//Fetch Row count
			int rowCount = sheet.getLastRowNum();
			//Fetch Column count for the rows
			int columnCount =  sheet.getRow(0).getLastCellNum();
			String[] dpSheetArray = new String[columnCount];
				for (int i=0; i<columnCount; i++){
					XSSFCell dpCell = sheet.getRow(0).getCell(i);
					try{
						//Switch case to check the data type input in the excel
						switch(dpCell.getCellType()){
							case 0 :
							dpSheetArray[i] = ((int)dpCell.getNumericCellValue()).toString();
							break;	
							case 1 :
							dpSheetArray[i] = dpCell.getStringCellValue();
							break;
							}
						}catch(Exception e){	
					}
				}
			return dpSheetArray;
		}catch(Exception e){
			def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","fetchInputDatafromExcel-> Excel Input Data NOT fetched correctly.\nException caught: "+e.getMessage());
			throw new Exception("fetchInputDatafromExcel-> Excel Input Data NOT fetched correctly.\nException caught: "+e.getMessage());
		}
	}
	/*
	###############################################################################
	Function name:  getInputCellValue()
	Description  :  To Fetch the string value from a particular cell
 	Parameters   :	 strExcelReadPath,strExcelSheetName,iRow,iColumn
	Return Value :  strCellValue
	###############################################################################
	*/  
	String getInputCellValue(def strExcelReadPath,def strExcelSheetName, def iRow, def iColumn){
		try{
			String strCellValue;
			File file = new File(strExcelReadPath);
			FileInputStream inputStream = new FileInputStream(file);
			//Create a Workbook object
			Workbook workbook = new XSSFWorkbook(inputStream);
			Cell dpCell= workbook.getSheet(strExcelSheetName).getRow(iRow.toInteger()).getCell(iColumn.toInteger());
			try{
			//Switch case to check the data type input in the excel
				switch(dpCell.getCellType()){
					case 0 :
					strCellValue = ((int)dpCell.getNumericCellValue()).toString();
					break;	
					case 1 :
					strCellValue = dpCell.getStringCellValue();
					break;
				}
			}catch(Exception e){			
			}
			//Create an object of Sheet
			return strCellValue;
		}catch(Exception e){
			def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","fetchInputDatafromExcel-> Excel Input Data NOT fetched correctly.\nException caught: "+e.getMessage());
			throw new Exception("fetchInputDatafromExcel-> Excel Input Data NOT fetched correctly.\nException caught: "+e.getMessage());
		}
	}
	/*
	###############################################################################
	Function name:  createReferenceToUtilityFunctions()
	Description  :  Creates and returns a reference to call utility function class 
 	Parameters   :	 
	Return Value :  objUtilityFunctions
	###############################################################################
	*/  
	def createReferenceToReportingFunctions(){
		def objReportingLogPath = testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"].getTestStepByName("Reporting_Log")
		//Call and initialize the object of Utility Library class
		objReportingLogPath.run(testRunner, context)
		def objReportingLog = context.objReportingLog
		return objReportingLog;		
	}
	/*
	###############################################################################
	Function name:  fetchEnvDetails()
	Description  :  Fetches the environment details from test suite list sheet 
 	Parameters   :	 strEnv,fileProperties,strExcelReadPath,strExcelSheetName
	Return Value :  
	###############################################################################
	*/  
	def fetchEnvDetails(def strEnv,def fileProperties,String strExcelReadPath,String strExcelSheetName){
			//Read Data from Xlsx File
			File file = new File(strExcelReadPath);
			FileInputStream inputStream = new FileInputStream(file);
		try{
			//Create a Workbook object
			Workbook workbook = new XSSFWorkbook(inputStream);
			//Create an object of Sheet
			Sheet sheet = workbook.getSheet(strExcelSheetName);
			//Fetch Row count
			int rowCount = sheet.getLastRowNum();
			//Fetch Column count for the rows
			int columnCount =  sheet.getRow(0).getLastCellNum();
			int itrCol;
			for(itrCol=0; itrCol<columnCount; itrCol++){
	 			if((sheet.getRow(0).getCell(itrCol).getStringCellValue()).equalsIgnoreCase("Environment")){
	 				break;
	 			}
	 		}
	 		int iRow;
			for(iRow=0;iRow<=rowCount;iRow++){
				if((sheet.getRow(iRow).getCell(itrCol).getStringCellValue()).equalsIgnoreCase(strEnv)){
					fileProperties.setPropertyValue("Environment",strEnv);
	 				break;
	 			}
			}
			for(int iVal=0; iVal<=columnCount; iVal++){
	 			if((sheet.getRow(0).getCell(iVal).getStringCellValue()).equalsIgnoreCase("Database_Server")){
	 				fileProperties.setPropertyValue("Database_Server",sheet.getRow(iRow).getCell(iVal).getStringCellValue());
	 				break;
	 			}
	 		}

			for(int iVal=0; iVal<=columnCount; iVal++){
	 			if((sheet.getRow(0).getCell(iVal).getStringCellValue()).equalsIgnoreCase("Database_Port")){
	 				def intDatabasePort=(int)sheet.getRow(iRow).getCell(iVal).getNumericCellValue();
	 				fileProperties.setPropertyValue("Database_Port",intDatabasePort.toString());
	 				break;
	 			}
	 		}
	 		for(int iVal=0; iVal<=columnCount; iVal++){
	 			if((sheet.getRow(0).getCell(iVal).getStringCellValue()).equalsIgnoreCase("Database_Name")){
	 				fileProperties.setPropertyValue("Database_Name",sheet.getRow(iRow).getCell(iVal).getStringCellValue());
	 				break;
	 			}
	 		}
	 		for(int iVal=0; iVal<=columnCount; iVal++){
	 			if((sheet.getRow(0).getCell(iVal).getStringCellValue()).equalsIgnoreCase("Database_Username")){
	 				fileProperties.setPropertyValue("Database_Username",sheet.getRow(iRow).getCell(iVal).getStringCellValue());
	 				break;
	 			}
	 		}
	 		for(int iVal=0; iVal<=columnCount; iVal++){
	 			if((sheet.getRow(0).getCell(iVal).getStringCellValue()).equalsIgnoreCase("Database_Password")){
	 				fileProperties.setPropertyValue("Database_Password",sheet.getRow(iRow).getCell(iVal).getStringCellValue());
	 				break;
	 			}
	 		}
	 		for(int iVal=0; iVal<=columnCount; iVal++){
	 			if((sheet.getRow(0).getCell(iVal).getStringCellValue()).equalsIgnoreCase("Company_ID")){
	 				def intCompanyID=(int)sheet.getRow(iRow).getCell(iVal).getNumericCellValue();
	 				fileProperties.setPropertyValue("Company_ID",intCompanyID.toString());
	 				break;
	 			}
	 		}
		}catch(Exception e){
			def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","fetchEnvDetails-> Environment details were NOT fetched correctly.\nException caught: "+e.getMessage());
			throw new Exception("fetchEnvDetails-> Environment details were NOT fetched correctly.\nException caught: "+e.getMessage());
		}
	}	
}
//*******************Set the object of Excel Interaction to current test context*******
context.setProperty( "objExcelInteraction", new Excel_Interaction( log, context, testRunner) )]]></script></con:config></con:testStep><con:testStep type="groovy" name="Class_UtilityFunctions" id="10cbc4ba-dbef-4640-89ed-f2007b87aaf0"><con:settings/><con:config><script><![CDATA[import javax.swing.JOptionPane;
import com.eviware.soapui.support.types.StringToStringMap 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import groovy.sql.*
import groovy.json.JsonSlurper

public class Class_UtilityFunctions
{
	def log
	def context
	def testRunner
	
     //Constructor of Class Class_UtilityFunctions
     def Class_UtilityFunctions(logIn, contextIn, testRunnerIn)
	{
	 this.log = logIn
	 this.context = contextIn
	 this.testRunner = testRunnerIn
	}
	/*
	###############################################################################
	Function name:  setEndPoint_HeaderForRequests()
	Description  :  To set the endpoints of all request input by the user in the data input sheet
	Parameters   :	 testStepRequest,objExcelInteraction,strExcelReadPath,strExcelSheetName,strRequestName
	Return Value : 
	###############################################################################
	*/ 
	def setEndPoint_HeaderForRequests(def testStepRequest,def objExcelInteraction,String strExcelReadPath,String strExcelSheetName,String strRequestName){
		//Set EndpointURL's for all the required requests
		try{
			def objReportinglog=createReferenceToReportingFunctions();
			def fileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Global_Variables") 
			def objLocalVariables=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables") 
			String[][] strEndPointSheetArray=objExcelInteraction.fetchInputDatafromExcel(strExcelReadPath,strExcelSheetName);
			def headers = new StringToStringMap();
			//Get row and column count
			int dpColumnCount = strEndPointSheetArray[0].length, dpRowCount=strEndPointSheetArray.length -1;
			def intRequestNameColNum=objExcelInteraction.getColumnNumber_ForColumnName("Request_Name",strEndPointSheetArray)
			def intEndPointColNum=objExcelInteraction.getColumnNumber_ForColumnName("EndPoints",strEndPointSheetArray)
			def intContentTypeColNum=objExcelInteraction.getColumnNumber_ForColumnName("Content-Type",strEndPointSheetArray)
			def intAuthColNum=objExcelInteraction.getColumnNumber_ForColumnName("Authorization",strEndPointSheetArray)
			for(int itr=1; itr<= dpRowCount ;itr++){
				if(((strEndPointSheetArray[itr][intRequestNameColNum]).trim()).equalsIgnoreCase(strRequestName)){
					//testRunner.testCase.getTestStepByName(strEndPointSheetArray[itr][0]).getTestRequest().setEndpoint(strEndPointSheetArray[itr][1]).toString();
					String strEndPoint=modifyEndpointsIfRequired(fileProperties,objExcelInteraction,strExcelReadPath,strEndPointSheetArray[itr][intEndPointColNum]);
					objLocalVariables.setPropertyValue("EndPoint",strEndPoint);
					testStepRequest.getTestRequest().setEndpoint(strEndPoint);
					objReportinglog.logInfo("Info","EndPoint set for Request: "+strEndPointSheetArray[itr][intRequestNameColNum]);
					if(!strEndPointSheetArray[itr][intContentTypeColNum].trim().isEmpty()){
						headers.put("Content-Type",strEndPointSheetArray[itr][intContentTypeColNum].trim());
						objReportinglog.logInfo("Info","Header Content-Type set for Request: "+strEndPointSheetArray[itr][intRequestNameColNum]);
					}
					if(strEndPointSheetArray[itr][intAuthColNum]!=null){
						headers.put("Authorization",strEndPointSheetArray[itr][intAuthColNum].trim());
						objReportinglog.logInfo("Info","Header Authorization set for Request: "+strEndPointSheetArray[itr][intRequestNameColNum]);
					}else{
						if(fileProperties.getPropertyValue("JWT_Token")!=null){
							headers.put("Authorization","Bearer "+fileProperties.getPropertyValue("JWT_Token"));
							objReportinglog.logInfo("Info","Header Authorization set for Request: "+strEndPointSheetArray[itr][intRequestNameColNum]);
						}
					}
					testStepRequest.getTestRequest().setRequestHeaders(headers);
					return;				
				}
				if(itr==dpRowCount)	{
					throw new Exception ("Request name "+strRequestName+" not found in the excel sheet REQUEST_ENDPOINTS")		
				}
			}
		}catch(Exception e){
			def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","setEndPoint_HeaderForRequests-> Endpoints/Headers are NOT set successfully.\n Exception caught: "+e.getMessage());
			throw new Exception("setEndPoint_HeaderForRequests-> Endpoints/Headers are NOT set successfully.\n Exception caught: "+e.getMessage());
		}
	}
	/*
	###############################################################################
	Function name:  removePropertyName_Value()
	Description  :  Delete property names and values
	Parameters   :	 localFileProperties
	Return Value : 
	###############################################################################
	*/ 
	 def removePropertyName_Value(def localFileProperties){
	 	try{
	 		localFileProperties.clearPropertyValues();
			 String[] propToRemove = new String[localFileProperties.getPropertyCount()];
			 propToRemove = localFileProperties.getPropertyNames();
			 for ( int i = 0 ; i < propToRemove.size(); i++ ){
			    localFileProperties.removeProperty( propToRemove[i] );
			 }
	 	}catch(Exception e){
	 		def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","removePropertyName_Value-> Local File Properties in Driver Test Suite was NOT removed successfully.\n Exception caught: "+e.getMessage());
			throw new Exception("removePropertyName_Value-> Local File Properties in Driver Test Suite was NOT removed successfully.\n Exception caught: "+e.getMessage());
		} 
	 }
	/*
	###############################################################################
	Function name:  modifyEndpointsIfRequired()
	Description  :  Modifies the endpoint if endpoint needs to be modified
	Parameters   :	 fileProperties,objExcelInteraction,strExcelReadPath,strEndPoint
	Return Value :  strEndPoint
	###############################################################################
	*/ 
	 String modifyEndpointsIfRequired(def fileProperties,def objExcelInteraction,String strExcelReadPath,String strEndPoint){
		try{
			int iCounter=0;
			def strTestCaseName=fileProperties.getPropertyValue("TestcaseName");
			def objLocalVariables=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables");
			def iDataSet=objLocalVariables.getPropertyValue("Dataset");
		 	String[][] strEndPointSheetArray=objExcelInteraction.fetchInputDatafromExcel(strExcelReadPath,strTestCaseName);
			//Get row and column count
			int dpColumnCount = strEndPointSheetArray[0].length, dpRowCount=strEndPointSheetArray.length -1;
		 	String[] dpSheetArray =  objExcelInteraction.fetchColumnNamefromExcel(strExcelReadPath,strTestCaseName);
		 	for(int iRow=0;iRow<dpSheetArray.size();iRow++){
		 		if(dpSheetArray[iRow].toLowerCase().contains("url_".toLowerCase())){
		 			def arrURLColumnName=dpSheetArray[iRow].toLowerCase().split('_');
		 			def strURLColumnName=arrURLColumnName[1];
		 			def intColNum=objExcelInteraction.getColumnNumber_ForColumnName(dpSheetArray[iRow].toLowerCase(),strEndPointSheetArray)
					String strURLValue=objExcelInteraction.getInputCellValue(strExcelReadPath,strTestCaseName,iDataSet,intColNum)
					if(strURLValue!=null){
						if(iCounter==0){
							strEndPoint=strEndPoint+"?"+strURLColumnName+"="+strURLValue;
							iCounter=iCounter+1;
						}else{
							strEndPoint=strEndPoint+"&"+strURLColumnName+"="+strURLValue;
							iCounter=iCounter+1;
						}
						objLocalVariables.setPropertyValue(strURLColumnName,strURLValue);
					}
		 		}
		 	}
		 	return strEndPoint;
	 	}catch(Exception e){
	 		def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","modifyEndpointsIfRequired-> Endpoint "+strEndPoint+" was NOT modified successfully.\n Exception caught: "+e.getMessage());
			throw new Exception("modifyEndpointsIfRequired-> Endpoint "+strEndPoint+" was NOT modified successfully.\n Exception caught: "+e.getMessage());
		} 
	 }
	/*
	###############################################################################
	Function name:  setDBConnection()
	Description  :  Sets the SQL database connection
	Parameters   :	 
	Return Value :  
	###############################################################################
	*/ 
	def setDBConnection(){
		try{
			def fileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Global_Variables") 
			String databaseServer = fileProperties.getPropertyValue("Database_Server");
			String databasePort = fileProperties.getPropertyValue("Database_Port");
			String databaseName = fileProperties.getPropertyValue("Database_Name");
			String databaseUsername = fileProperties.getPropertyValue("Database_Username");
			String databasePassword=fileProperties.getPropertyValue("Database_Password");
			def  sqlConnection = Sql.newInstance("jdbc:mysql://" + databaseServer+ ":" + databasePort + "/" + databaseName,databaseUsername, databasePassword, "com.mysql.jdbc.Driver");
			return sqlConnection;
	  	}catch(Exception e){
	  		def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","setDBConnection()-> Database connection could NOT be established.\n Exception caught: "+e.getMessage());
			throw new Exception("setDBConnection()-> Database connection could NOT be established.\n Exception caught: "+e.getMessage());
		} 
	}
	/*
	###############################################################################
	Function name:  initializeVerifyTestStep()
	Description  :  Initializes and fetches response for the verify test step for all test cases
	Parameters   :	 strDescription,strID
	Return Value :  
	###############################################################################
	*/ 
	def initializeVerifyTestStep(def strDescription,def strID){
		try{
			def fileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Global_Variables")
			def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
			def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
			reportingLogFunctions_TestStep.run(testRunner, context)
			def objReportingLog=context.objReportingLog
			def objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
			def strTestSuiteName=fileProperties.getPropertyValue("TestsuiteName");
			def strTestCaseName=fileProperties.getPropertyValue("TestcaseName")
			//def strDataSet=objLocalVariablesPath.getPropertyValue("Dataset")
			def strRequestName=objLocalVariablesPath.getPropertyValue("Request_Name");
			def responseContent = testRunner.testCase.testSuite.project.getTestSuiteByName(strTestSuiteName).getTestCaseByName(strTestCaseName).getTestStepByName(strRequestName).getPropertyValue("response")
			def jsonResponse;
			if(responseContent!=null){
				jsonResponse = new JsonSlurper().parseText(responseContent);
			}else{
				if(strDescription!=""){
					responseContent="NO JSON Response Content was fetched for "+strDescription+"-"+	strID;
				}else{
					responseContent="NO JSON Response Content was fetched"	
				}
				jsonResponse=null;
			}
			def error = []
			//verify the slurper isn't empty
			def responseStatusHeader=testRunner.testCase.getTestStepByName(strRequestName).testRequest.response.getResponseHeaders()
			if(responseStatusHeader["#status#"]!=['HTTP/1.1 200 OK']){
				error.add("Response Status is - "+responseStatusHeader["#status#"])
				error.add("; Json Response - "+responseContent);
			}
			objLocalVariablesPath.setPropertyValue("Json_Response",responseContent.toString());
			if(error.size()!=0){
				objLocalVariablesPath.setPropertyValue("Error",error.toString())
				objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
				objReportingLog.logInfo("Error", " Response error- "+error.toString());
			}
			return jsonResponse;
		}catch(Exception e){
	  		def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","initializeVerifyTestStep()-> Intialize verify test step failed.\n Exception caught: "+e.getMessage());
			throw new Exception("initializeVerifyTestStep()-> Intialize verify test step failed.\n Exception caught: "+e.getMessage());
		} 
	}
	/*
	###############################################################################
	Function name:  compareListArrays()
	Description  :  Compares the two array lists
	Parameters   :	 arrJsonValue,results,strResultVal
	Return Value :  
	###############################################################################
	*/ 
	def compareListArrays(def arrJsonValue,def results,def strResultVal){
		try{
			boolean blnArryDifference=false;
			if(results!=null && arrJsonValue!=null && results.size()== arrJsonValue.size()){
				def arrDifference=(results.toList() - arrJsonValue.toList()).size();
				if (arrDifference!=0){
					blnArryDifference=true;
				}
			}else{
				blnArryDifference=true;
			}
			def objReportingLog=createReferenceToReportingFunctions();
			if(blnArryDifference){
				def objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
				objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
				if((results.toList() - arrJsonValue.toList()).size()>0){
					objLocalVariablesPath.setPropertyValue("Error", "List of "+strResultVal+" NOT found in JSON response but found in SQL Database "+(results.toList() - arrJsonValue.toList()));
					objReportingLog.logInfo("ERROR","List of "+strResultVal+" NOT found in JSON response "+(results.toList() - arrJsonValue.toList()));
				}else{
					objLocalVariablesPath.setPropertyValue("Error", "List of "+strResultVal+" NOT found in SQL Database records but found in JSON response "+(arrJsonValue.toList()-results.toList()));
					objReportingLog.logInfo("ERROR","List of "+strResultVal+" ID NOT found in SQL Database records but found in JSON response "+(arrJsonValue.toList()-results.toList()));
				}
			}else{
				objReportingLog.logInfo("Info","List of "+strResultVal+" found in SQL Database records matches with those fetched from JSON response");
			}
		}catch(Exception e){
	  		def objReportingLog=createReferenceToReportingFunctions();
			objReportingLog.logInfo("Fail","compareListArrays()-> Compare arrays for "+strResultVal+" failed.\n Exception caught: "+e.getMessage());
			throw new Exception("compareListArrays()-> Compare arrays for "+strResultVal+" failed.\n Exception caught: "+e.getMessage());
		} 
	}
	/*
	###############################################################################
	Function name:  createReferenceToReportingFunctions()
	Description  :  Creates the reference to reporting functions
	Parameters   :	 
	Return Value :  
	###############################################################################
	*/ 
	def createReferenceToReportingFunctions(){
		def objReportingFunctionsPath = testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"].getTestStepByName("Reporting_Log")
		//Call and initialize the object of Utility Library class
		objReportingFunctionsPath.run(testRunner, context)
		def objReportingLog = context.objReportingLog
		return objReportingLog;		
	}
}

//*******************Set the object of Class_UtilityFunctions to current test context*******
context.setProperty( "objUtilityFunctions", new Class_UtilityFunctions( log, context, testRunner) )]]></script></con:config></con:testStep><con:testStep type="groovy" name="Reporting_Log" id="a7385d03-9fdb-4387-a696-aea34b46d9c8"><con:settings/><con:config><script>// @Author - Abhishek Dhingra
// This class will consist of all the required functions to handle reporting error and pass messages 
import java.*;
import java.util.*;
import java.util.Date;
import org.apache.commons.io.FileUtils;

class Reporting_Log{
	
	def log
	def context
	def testRunner

     //Constructor of Class Reporting_Log
     def Reporting_Log(logIn, contextIn, testRunnerIn){
		this.log = logIn
		this.context = contextIn
		this.testRunner = testRunnerIn
	}
	/*
	###############################################################################
	Function name:  createRunResultFolder()
	Description  :  Creates the Run Result folder for storing all the results
	Parameters   :	 strResultFolderPath
	Return Value :  
	###############################################################################
	*/ 
	def createRunResultFolder(def strResultFolderPath){
		try{
			def objGlobalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
			def currentDateTimeStamp = new Date().format("yyyy-MM-dd_HH:mm:ss").replaceAll(":","-").toString()
			currentDateTimeStamp = currentDateTimeStamp.replaceAll(":","_")
			def sFolderPath= strResultFolderPath+"/Result_"+currentDateTimeStamp
			objGlobalVariablesPath.setPropertyValue("Folder_Path",sFolderPath)
			//Creating Parent Result Folder
			File resultfolder = new File(sFolderPath);
			if(!resultfolder.exists()){
				resultfolder.mkdirs();
			}	
		}catch(Exception e){
			logInfo("Fail","createRunResultFolder-> Run Result folder at path- "+strResultFolderPath+" was NOT created successfully.\n Exception caught: "+e.getMessage());
			throw new Exception("createRunResultFolder-> Run Result folder at path- "+strResultFolderPath+" was NOT created successfully.\n Exception caught: "+e.getMessage());
		} 	
	}
	/*
	###############################################################################
	Function name:  createTestResultFolderStructure()
	Description  :  Creates the test suite folder structure under the Run Result folder
	Parameters   :	 
	Return Value :  
	###############################################################################
	*/ 
	def createTestResultFolderStructure(){
		try{
			def objGlobalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
			def strResultFolderPath=objGlobalVariablesPath.getPropertyValue("Folder_Path");
			def strTestSuiteName=objGlobalVariablesPath.getPropertyValue("TestsuiteName");
			def strTestSuiteFilePath=objGlobalVariablesPath.getPropertyValue("TestSuiteFilePath");
			def strTestSuiteFolderPath=strResultFolderPath+"/"+strTestSuiteName;
			//Creating Testsuite Result Folder
			File folderPath = new File(strTestSuiteFolderPath);
			if( !folderPath.exists()){
				folderPath.mkdir();
			}
			File sourceLocation = new File(strTestSuiteFilePath);
			File destinationFolder = new File(strTestSuiteFolderPath+"/");
			try {
			    FileUtils.copyFileToDirectory(sourceLocation, destinationFolder);
			} catch (IOException e) {
			}
			File logTestSuiteFilePath = new File(strTestSuiteFolderPath+"/"+strTestSuiteName+".log");
			if(!logTestSuiteFilePath.exists()){
				logTestSuiteFilePath.write("***************************** "+strTestSuiteName+" RESULT LOG *********************************\n");
			}
			File responseFolder = new File(strTestSuiteFolderPath+"/Response_Files");
	        	if (!responseFolder.exists()){
		        	responseFolder.mkdir();
		        	new File(strTestSuiteFolderPath+"/Response_Files/Pass").mkdir();
		        	new File(strTestSuiteFolderPath+"/Response_Files/Fail").mkdir();
	        	}	
		}catch(Exception e){
			logInfo("Fail","createRunResultFolder-> Test result folder was NOT created successfully.\nException caught: "+e.getMessage());
			throw new Exception("createRunResultFolder-> Test result folder was NOT created successfully.\nException caught: "+e.getMessage());
		} 
	}
	/*
	###############################################################################
	Function name:  createTestCaseFolderAndResponseFile()
	Description  :  Creates the reponse file for each test case under the test suite/test case folder structure 
	Parameters   :	 strStatus,strResponseContent,strRequestName,iDataSet
	Return Value :  
	###############################################################################
	*/ 
	def createTestCaseFolderAndResponseFile(String strStatus ,def strResponseContent,def strRequestName,def iDataSet){
		try{
			def objGlobalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
			def strResultFolderPath=objGlobalVariablesPath.getPropertyValue("Folder_Path");
			def strTestSuiteName=objGlobalVariablesPath.getPropertyValue("TestsuiteName");
			def strTestCaseName=objGlobalVariablesPath.getPropertyValue("TestcaseName");
			def strTestSuiteFolderPath=strResultFolderPath+"/"+strTestSuiteName;
			def strTestCasePath;
			def localFileProperties = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")

			File fileTestcaseFolder,fileResponseLogFile;
			if(strStatus.equalsIgnoreCase("Pass")){
				fileTestcaseFolder=new File(strTestSuiteFolderPath+"/Response_Files/Pass/"+strTestCaseName);
				strTestCasePath=strTestSuiteFolderPath+"/Response_Files/Pass/"+strTestCaseName;
			}else if(strStatus.equalsIgnoreCase("Fail")){
				fileTestcaseFolder=new File(strTestSuiteFolderPath+"/Response_Files/Fail/"+strTestCaseName);
				strTestCasePath=strTestSuiteFolderPath+"/Response_Files/Fail/"+strTestCaseName;
			}
			if(!fileTestcaseFolder.exists()){
		        	fileTestcaseFolder.mkdir();
	        	}
	        	
	        	def strResponseLogFile=strTestCasePath+"/DataSet"+iDataSet+"-"+strRequestName+".log";
	        	def objRequestPath = testRunner.testCase.testSuite.project.testSuites[strTestSuiteName].testCases[strTestCaseName].getTestStepByName(strRequestName)		
	        	def strEndPoint=objRequestPath.getTestRequest().getEndpoint();
			def header = objRequestPath.getTestRequest().getRequestHeaders()
			//def jsonResponse = objRequestPath.getPropertyValue("response")
			def jsonResponse=localFileProperties.getPropertyValue("Json_Response");
			fileResponseLogFile =new File(strResponseLogFile);
			if(!fileResponseLogFile.exists()){
		        	fileResponseLogFile.write("======================== Response for "+strRequestName+" - DataSet: "+iDataSet.toString()+" ========================\n");
	        		fileResponseLogFile.append("ENDPOINT- "+strEndPoint+"\n");
	        		fileResponseLogFile.append("HEADERS- ");
	        		header.each{
				  	key,val ->
					fileResponseLogFile.append(key+" : "+val+" ; ");
				}						
				fileResponseLogFile.append("\n==============================================================================================\n\n");	
	        		fileResponseLogFile.append(jsonResponse);
	        		if(localFileProperties.getPropertyValue("Error")!=null){
	        			fileResponseLogFile.append("\n"+localFileProperties.getPropertyValue("Error"));
	        		}
	        	}	
		}catch(Exception e){
			logInfo("Fail","createTestCaseFolderAndResponseFile-> Test case folder and response file was NOT created successfully.\nException caught: "+e.getMessage());
			throw new Exception("createTestCaseFolderAndResponseFile-> Test result folder and response file was NOT created successfully.\nException caught: "+e.getMessage());
		} 
	}
	/*
	###############################################################################
	Function name:  logInfo()
	Description  :  Logs info/error in the log file
	Parameters   :	 strStatus,strMessage
	Return Value :  
	###############################################################################
	*/ 
	def logInfo(def strStatus,def strMessage){
		try{
			def objGlobalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
			def strResultFolderPath=objGlobalVariablesPath.getPropertyValue("Folder_Path");
			def strTestSuiteName=objGlobalVariablesPath.getPropertyValue("TestsuiteName");
			def strTestSuiteFolderPath=strResultFolderPath+"/"+strTestSuiteName+"/"+strTestSuiteName+".log";
			//Creating Testsuite Result Folder
			File folderPath = new File(strTestSuiteFolderPath);
			File errorLog=new File (strResultFolderPath+"/"+strTestSuiteName+"/Error_Logs.log");
			if(folderPath.exists()){
				if(strStatus==""){
					folderPath.append(strMessage+"\n");		
				}else{
					if(strStatus.equalsIgnoreCase("Error")){
						if(!errorLog.exists()){
							errorLog.write("################################ Error Log ################################\n");
						}
						def strTestCaseName=objGlobalVariablesPath.getPropertyValue("TestcaseName");
						def iErrorDataSet=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables").getPropertyValue("Error_Dataset")
						def iDataSet=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables").getPropertyValue("Dataset")
						if(objGlobalVariablesPath.getPropertyValue("Error_TestcaseName")!=strTestCaseName || iErrorDataSet!=iDataSet){
							errorLog.append("\n=============== "+strTestCaseName+" - DataSet: "+iDataSet.toString()+" ========================\n");
						}	
						errorLog.append(strStatus.toUpperCase()+"- "+strMessage+"\n");
						objGlobalVariablesPath.setPropertyValue("Error_TestcaseName",strTestCaseName);
						testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables").setPropertyValue("Error_Dataset",iDataSet);
					}
					folderPath.append(strStatus.toUpperCase()+"- "+strMessage+"\n");	
				}
			}
		}catch(Exception e){	
		}
	}	
}
//Set the object of Class_ReportingLog to current test context
context.setProperty("objReportingLog", new Reporting_Log( log, context, testRunner) )</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="2829d5b4-c6bb-47f8-86e1-1a491458a652" name="testSuite_OpenAPI"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="6d2d61b1-3736-43b3-b974-8fa94302c1d7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_Auth" searchProperties="true"><con:settings/><con:testStep type="httprequest" name="OpenAPI_Auth" id="ecf73e76-4afb-457b-bbf9-8fc3ba729a61"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="aad707e9-26e2-43ef-af02-556b122a5bdc" name="OpenAPI_Auth" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Key abcdefghij"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/auth</con:endpoint><con:request>{
  "email": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Testcase_Variables"].getPropertyValue('UserName')}",
  "password": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Testcase_Variables"].getPropertyValue('Password')}"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get_JWT_Token" id="d5945ab2-07f9-4da7-a9ee-b3cb1522d8c0"><con:settings/><con:config><script>def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("","");
error = []
if(objLocalVariablesPath.getPropertyValue("Error")!=null){
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	fileProperties.setPropertyValue("Stop_Execution", "Yes");
}
assert error.size() == 0
//objReportingLog.logInfo("Info","JWT Token- "+jsonResponse.token);
fileProperties.setPropertyValue("JWT_Token", jsonResponse.token);</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="929d7276-ebfe-4a19-9174-cffa15841bb2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_Verify" searchProperties="true"><con:settings/><con:testStep type="httprequest" name="OpenAPI_Verify" id="7f7ed60a-cde5-4102-a86d-2378d6dff9e3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4378fb1e-eeaf-4996-a02d-f5c537e805c9" name="OpenAPI_Verify" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Key abcdefghij"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/auth/verify</con:endpoint><con:request>{
  "token": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Global_Variables"].getPropertyValue('JWT_Token')}"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verifyJWT_Token" id="eb8af0a2-2fec-4c4f-9cca-536e89eaadcd"><con:settings/><con:config><script>def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("","");
error = []
if(objLocalVariablesPath.getPropertyValue("Error")==null){
	def strStoredJWT=fileProperties.getPropertyValue("JWT_Token");
	if(strStoredJWT.equalsIgnoreCase(jsonResponse.token)){
		objLocalVariablesPath.setPropertyValue("Testcase_Status","Passed")
	}else{
		objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
		error.add("JWT token "+strStoredJSON+" does NOT matches with the token fetched from verify response\n "+jsonResponse.token);
		objReportingLog.logInfo("Error",error.toString());
	}
}else{
	error.add(objLocalVariablesPath.getPropertyValue("Error"));	
}
assert error.size() == 0
objReportingLog.logInfo("Info","JWT Token- "+jsonResponse.token)
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c7f3b604-4206-4d59-ad99-6c758d1e0425" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_Refresh" searchProperties="true"><con:settings/><con:testStep type="httprequest" name="OpenAPI_Refresh" id="7ac4e8de-e568-46ba-b519-0d74c07db3a0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="6b09bfc6-e404-4662-ae53-f2e0bdbf7993" name="OpenAPI_Refresh" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Key abcdefghij"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/auth/refresh</con:endpoint><con:request>{
  "token": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Global_Variables"].getPropertyValue('JWT_Token')}"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_JWTRefresh" id="05073e3b-fa14-45a6-8468-2429ed044fca"><con:settings/><con:config><script>def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("","");
error = []

if(objLocalVariablesPath.getPropertyValue("Error")==null){
	def strStoredJWT=fileProperties.getPropertyValue("JWT_Token");
	if(!strStoredJWT.equalsIgnoreCase(jsonResponse.token)){
		objLocalVariablesPath.setPropertyValue("Testcase_Status","Passed")
	}else{
		objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
		error.add("JWT token "+strStoredJSON+" does NOT matches with the token fetched from verify response\n "+jsonResponse.token);
		objReportingLog.logInfo("Error",error.toString());
	}
}else{
	error.add(objLocalVariablesPath.getPropertyValue("Error"));	
}
assert error.size() == 0
objReportingLog.logInfo("Info","JWT Token- "+jsonResponse.token)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3bb2a255-ae47-4bf1-a543-c3834487ebfa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_Users" searchProperties="true"><con:settings/><con:testStep type="httprequest" name="OpenAPI_Users" id="d3ad2980-86b4-4d2a-8975-4560d4eef436"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="ee82d6ac-e6d1-41f7-b44b-3657e54b4826" name="OpenAPI_Users" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/users?search=&amp;limit=5&amp;page=4</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_Users" id="82deb55c-deb8-4533-ad2b-4a1ccb3966c1"><con:settings/><con:config><script>import groovy.json.JsonSlurper
def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
strRequestName=objLocalVariablesPath.getPropertyValue("Request_Name");
arrJsonUserID=[];
arrUserID=[];
boolean blnHasNextPage=true;
int iJson=0,iCounter=1;
def strJsonResponse="========================================== PAGE - 1 ==========================================\n";
error = []

//verify the slurper isn't empty
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("","");

if(objLocalVariablesPath.getPropertyValue("Error")==null){
	if(jsonResponse.pages.total >0){
		objReportingLog.logInfo("", "\n====================================== PAGE - 1 ============================================");
		while(blnHasNextPage){
			if(iJson!=0){
				if(jsonResponse.pages.links.next.toString()!=""){
					def strEnv=fileProperties.getPropertyValue("Environment");
					testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint("https://api-open-"+strEnv.toLowerCase()+".xref.com"+jsonResponse.pages.links.next.toString());
					testRunner.testCase.getTestStepByName(strRequestName).run(testRunner, context)
					responseContent = testRunner.testCase.getTestStepByName(strRequestName).getPropertyValue("response")
					jsonResponse = new JsonSlurper().parseText(responseContent);
					blnHasNextPage=true;
					iJson=0;
				}else{
					blnHasNextPage=false;
				}
			}
			iCounter=iCounter+1;
			while(jsonResponse.data[iJson]!=null){
				arrJsonUserID.add(jsonResponse.data[iJson].id.toString());
				checkUserIDFromDB(jsonResponse.data[iJson]);
				iJson=iJson+1;
			}
			if(blnHasNextPage &amp;&amp; iCounter&lt;=jsonResponse.pages.total+1){
				if(iCounter&lt;jsonResponse.pages.total+1){
					objReportingLog.logInfo("", "\n======================================== PAGE - "+iCounter+" =========================================");
					strJsonResponse=strJsonResponse+jsonResponse.toString()+"\n\n========================================= PAGE - "+iCounter+" ==========================================\n";	
				}else{
					objReportingLog.logInfo("", "\n===============================================================================================");	
					strJsonResponse=strJsonResponse+jsonResponse.toString()+"\n===============================================================================================\n";	
				}
			}
		}
		objLocalVariablesPath.setPropertyValue("Json_Response",strJsonResponse.toString())
		if(error.size()!=0){
			objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
			objReportingLog.logInfo("Error", " Response error- "+error.toString())
		}else{
			objUtilityFunctions.compareListArrays(arrJsonUserID,arrUserID,"User ID")
			if(objLocalVariablesPath.getPropertyValue("Error")!=null){
				error.add(objLocalVariablesPath.getPropertyValue("Error"));
			}	
		}
	}else{
		error.add("Total number of pages found in the JSON response is 0");
		objReportingLog.logInfo("Error", "Total number of pages found in the JSON response is 0");
	}	
}else{
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
}
if(error.size()!=0){
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
}
assert error.size() == 0

def checkUserIDFromDB(def jsonResponse){
	def sqlQuery="select user_id,first_name,last_name,email from user where company_id='"+fileProperties.getPropertyValue("Company_ID")+"' and user_id='"+jsonResponse.id+"'";
	def sql =objUtilityFunctions.setDBConnection();
	int intSize=sql.rows(sqlQuery).size();
	if(intSize>0){
		sql.eachRow(sqlQuery){ row ->
			arrUserID.add(row["user_id"].toString());
			if(row["user_id"].toString().equals(jsonResponse.id.toString())){
				objReportingLog.logInfo("Info", "USER ID- "+jsonResponse.id.toString()+ " is verified successfully in Sequel Pro database");
				if(row["first_name"].toString().equals(jsonResponse.first_name.toString())){
					objReportingLog.logInfo("Info", "USER FIRST NAME - "+jsonResponse.first_name.toString()+ " is verified successfully in Sequel Pro database");
				}else{
					error.add("USER FIRST NAME - "+jsonResponse.first_name.toString()+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "USER FIRST NAME - "+jsonResponse.first_name.toString()+ " is NOT verified successfully in Sequel Pro database");
				}
				if(row["last_name"].toString().equals(jsonResponse.last_name.toString())){
					objReportingLog.logInfo("Info", "USER LAST NAME - "+jsonResponse.last_name.toString()+ " is verified successfully in Sequel Pro database");
				}else{
					error.add("USER LAST NAME - "+jsonResponse.last_name.toString()+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "USER LAST NAME - "+jsonResponse.last_name.toString()+ " is NOT verified successfully in Sequel Pro database");
				}
				if(row["email"].toString().equals(jsonResponse.email.toString())){
					objReportingLog.logInfo("Info", "USER EMAIL - "+jsonResponse.email.toString()+ " is verified successfully in Sequel Pro database");
				}else{
					error.add("USER EMAIL - "+jsonResponse.email.toString()+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "USER EMAIL - "+jsonResponse.email.toString()+ " is NOT verified successfully in Sequel Pro database");
				}
			}else{
				objReportingLog.logInfo("Error", "USER ID- "+jsonResponse.id.toString()+ " is NOT found successfully in Sequel Pro database");
				error.add("USER ID- "+jsonResponse.id.toString()+ " is NOT verfied successfully in Sequel Pro database");
			}
			return;
		}	
	}else{
		error.add("No records fetched for query-" +sqlQuery+" in Sequel Pro database");
	}
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ed7a8f2f-0e64-4d50-82ed-6c69b86e1b8e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_UserID" searchProperties="true"><con:settings/><con:testStep type="groovy" name="modifyEndPoint_UserID" id="69d94787-2e17-41a7-8bd2-7f0b97b4c591"><con:settings/><con:config><script>def localFileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables") 
def strEndPoint=localFileProperties.getPropertyValue("EndPoint")
def strRequestName=localFileProperties.getPropertyValue("Request_Name");
def strUserID=localFileProperties.getPropertyValue("User_ID").toString();
def strModifiedEndPoint=strEndPoint+"/"+strUserID;

testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint(strModifiedEndPoint);</script></con:config></con:testStep><con:testStep type="httprequest" name="OpenAPI_UserID" id="e0973955-fa3e-4d7d-855b-90f3f2ae6d33"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="71a898d3-de23-4a83-8ec0-22fe49c68bb3" name="OpenAPI_UserID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/user/87121</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_UserID" id="dae3268e-769e-456f-8812-8bc51f3169c2"><con:settings/><con:config><script>def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
def strUserID=objLocalVariablesPath.getPropertyValue("User_ID").toString();
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("USER ID",strUserID);
error = []
if(objLocalVariablesPath.getPropertyValue("Error")==null){
	def sqlQuery="select user_id,first_name,last_name,email from user where company_id='"+fileProperties.getPropertyValue("Company_ID")+"' and user_id='"+strUserID+"'"
	checkUserIDFromDB(jsonResponse.id,jsonResponse.first_name,jsonResponse.last_name,jsonResponse.email,sqlQuery)
}else{
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
}
if(error.size()!=0){
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
}
assert error.size() == 0

def checkUserIDFromDB(def strUserID,def strFirstName,def strLastName,def strEmail,def sqlQuery){

	def sql =objUtilityFunctions.setDBConnection();
	int intSize=sql.rows(sqlQuery).size();
	if(intSize==1){
		sql.eachRow(sqlQuery){ row ->
			if(row["user_id"].toString().equals(strUserID.toString())){
				objReportingLog.logInfo("Info", "USER ID- "+strUserID+ " is verified successfully in Sequel Pro database");
				if(row["first_name"].toString().equals(strFirstName.toString())){
					objReportingLog.logInfo("Info", "FIRST NAME- "+strFirstName+ " is verified successfully in Sequel Pro database");
				}else{
					error.add("FIRST NAME- "+strFirstName+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "FIRST NAME- "+strLastName+ " is NOT verified successfully in Sequel Pro database");
				}
				if(row["last_name"].toString().equals(strLastName.toString())){
					objReportingLog.logInfo("Info", "LAST NAME- "+strLastName+ " is verified successfully in Sequel Pro database");
				}else{
					error.add("LAST NAME- "+strLastName+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "LAST NAME- "+strLastName+ " is NOT verified successfully in Sequel Pro database");
				}
				if(row["email"].toString().equals(strEmail.toString())){
					objReportingLog.logInfo("Info", "EMAIL- "+strEmail+ " is NOT verified successfully in Sequel Pro database");
				}else{
					error.add("EMAIL- "+strEmail+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "EMAIL- "+strEmail+ " is NOT verified successfully in Sequel Pro database");
				}
			}else{
				objReportingLog.logInfo("Error", "USER ID- "+strUserID+ " is NOT verified successfully in Sequel Pro database");
				error.add("USER ID- "+strUserID+ " is NOT verified successfully in Sequel Pro database");
			}
			return;
		}	
	}else{
		error.add("No records fetched for query-" +sqlQuery+" in Sequel Pro database");
	}
}
	</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ed6dd053-5059-41aa-a3a6-7fc4e2dce6b1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_Credits" searchProperties="true"><con:settings/><con:testStep type="httprequest" name="OpenAPI_Credits" id="db5dcfff-1fe6-410d-9c9e-ff3afe36495d"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="d97fa3a6-462c-4780-88c1-6c3505d4287d" name="OpenAPI_Credits" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/credits</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_CreditsRemaining" id="3134a32d-4519-44c5-9250-8129f67a4bdd"><con:settings/><con:config><script>def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("","");
error = []
if(objLocalVariablesPath.getPropertyValue("Error")==null){
	def sqlQuery="select credits_remaining from xref_companies_topups where company_id='"+fileProperties.getPropertyValue("Company_ID")+"'"
	checkCreditsRemainingFromDB(jsonResponse.credits_remaining,sqlQuery)
}else{
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
}
if(error.size()!=0){
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
}
assert error.size() == 0

def checkCreditsRemainingFromDB(def strCredits,def sqlQuery){

	def sql =objUtilityFunctions.setDBConnection();
	int intSize=sql.rows(sqlQuery).size();
	if(intSize==1){
		sql.eachRow(sqlQuery){ row ->
			if(row["credits_remaining"].toString().equals(strCredits.toString())){
				objReportingLog.logInfo("Info", "Credits remaining - "+strCredits+ " is successfully verified in Sequel Pro database");
			}else{
				objReportingLog.logInfo("Error", "Credits remaining - "+strCredits+ " is NOT successfully verified in Sequel Pro database");
				error.add("Credits remaining - "+strCredits+ " is NOT successfully verified in Sequel Pro database");
			}
			return;
		}	
	}else{
		error.add("No records fetched for query-" +sqlQuery+" in Sequel Pro database");
	}
}	</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b808e9ca-0c41-41fb-85cd-bb4fd5a64a08" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_Criteria" searchProperties="true"><con:settings/><con:testStep type="httprequest" name="OpenAPI_Criteria" id="e436cba3-3bef-4208-880d-fb2c71ee2fb4"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="a29c3ad7-07f9-4653-997d-ccb76052d195" name="OpenAPI_Criteria" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/criteria?search=&amp;limit=5&amp;page=2</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_Criteria" id="a0d52f1d-2017-4273-bda4-c907a816021d"><con:settings/><con:config><script>import groovy.json.JsonSlurper
def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")

blnQueryRun=true; 
arrJsonCriteriaID=[];
arrSQLCriteriaID=[];

//sqlQuery="select  t1.id,t1.name,t1.min_years,t1.min_referees from xref_check_xref_criteria t1  where company_owner_id='"+fileProperties.getPropertyValue("Company_ID")+"' and active='1' and user_created_not_adjusted='1' order by t1.id desc"

boolean blnHasNextPage=true;
int iJson=0,iCounter=1;
def strJsonResponse="========================================== PAGE - 1 =========================================\n";
error = [];
//verify the slurper isn't empty
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("","");
if(objLocalVariablesPath.getPropertyValue("Error")==null){
	if(jsonResponse.pages.total >0){
		objReportingLog.logInfo("", "\n====================================== PAGE - 1 ============================================");
		while(blnHasNextPage){
			if(iJson!=0){
				if(jsonResponse.pages.links.next.toString()!=""){
					jsonResponse.pages.links.next.toString();
					def strEnv=fileProperties.getPropertyValue("Environment");
					testRunner.testCase.getTestStepByName("OpenAPI_Criteria").getTestRequest().setEndpoint("https://api-open-"+strEnv.toLowerCase()+".xref.com"+jsonResponse.pages.links.next.toString());
					testRunner.testCase.getTestStepByName("OpenAPI_Criteria").run(testRunner, context)
					responseContent = testRunner.testCase.getTestStepByName("OpenAPI_Criteria").getPropertyValue("response")
					jsonResponse = new JsonSlurper().parseText(responseContent);
					blnHasNextPage=true;
					iJson=0;
				}else{
					blnHasNextPage=false;
				}
			}
			iCounter=iCounter+1;
			while(jsonResponse.data[iJson]!=null){
				arrJsonCriteriaID.add(jsonResponse.data[iJson].id.toString());
				checkCriteriaIDFromDB(jsonResponse.data[iJson]);
				iJson=iJson+1;
			}
			if(blnHasNextPage &amp;&amp; iCounter&lt;=jsonResponse.pages.total+1){
				if(iCounter&lt;jsonResponse.pages.total+1){
					objReportingLog.logInfo("", "\n======================================== PAGE - "+iCounter+" =========================================");
					strJsonResponse=strJsonResponse+jsonResponse.toString()+"\n\n========================================= PAGE - "+iCounter+" ==========================================\n";	
				}else{
					objReportingLog.logInfo("", "\n==============================================================================================");
					strJsonResponse=strJsonResponse+jsonResponse.toString()+"\n=================================================================================================\n";	
				}
			}
		}
		objLocalVariablesPath.setPropertyValue("Json_Response",strJsonResponse.toString())
		if(error.size()!=0){
			objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
			objReportingLog.logInfo("Error", " Response error- "+error.toString())
		}else{
			objUtilityFunctions.compareListArrays(arrJsonCriteriaID,arrSQLCriteriaID,"Criteria ID")
			if(objLocalVariablesPath.getPropertyValue("Error")!=null){
				error.add(objLocalVariablesPath.getPropertyValue("Error"));
			}	
		}
	}else{
		error.add("Total number of pages found in the JSON response is 0");
		objReportingLog.logInfo("Error", "Total number of pages found in the JSON response is 0");
	}	
}else{
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
}
if(error.size()!=0){
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
}
assert error.size() == 0

def checkCriteriaIDFromDB(def jsonResponse){
	def sqlCriteriaID="select  t1.id from xref_check_xref_criteria t1  where company_owner_id='"+fileProperties.getPropertyValue("Company_ID")+"' and active='1' and user_created_not_adjusted='1' order by t1.id desc"
	def sqlQuery="select DISTINCT t1.id,t1.name,t1.min_referees,t1.min_years,t1.min_referees,t1.note_to_candidate,t1.note_to_referee,t2.questionnaire_id,t2.period_type_id from xref_check_xref_criteria t1  INNER JOIN xref_check_criterion_period_type_questionnaire t2 ON t1.id=t2.criterion_id where company_owner_id='"+fileProperties.getPropertyValue("Company_ID")+"' and t1.id='"+jsonResponse.id+"' and active='1' and user_created_not_adjusted='1'"
	def sql =objUtilityFunctions.setDBConnection();
	int intSize=sql.rows(sqlQuery).size(),iCounter=0;
	if(intSize>0){
		sql.eachRow(sqlQuery){ row ->
			if(blnQueryRun==true){
					sql.eachRow(sqlCriteriaID){ rowID ->
					arrSQLCriteriaID.add(rowID["id"].toString());
				}
			}
			blnQueryRun=false;
			iCounter++;
			if(row["id"].toString().equals(jsonResponse.id.toString())){
				if(iCounter==1){
					objReportingLog.logInfo("Info", "CRITERION ID- "+jsonResponse.id.toString()+ " is verified successfully in Sequel Pro database");
				}
				if(row["name"].toString().equals(jsonResponse.name.toString())){
					if(iCounter==1){
						objReportingLog.logInfo("Info", "CRITERION NAME- "+jsonResponse.name.toString()+ " is verified successfully in Sequel Pro database");
					}
				}else{
					error.add("CRITERION NAME- "+jsonResponse.name.toString()+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "CRITERION NAME- "+jsonResponse.name.toString()+ " is NOT verified successfully in Sequel Pro database");
				}
				if(row["min_years"]==jsonResponse.min_years){
					if(iCounter==1){
						objReportingLog.logInfo("Info", "MINIMUM YEARS- "+jsonResponse.min_years+ " is verified successfully in Sequel Pro database");
					}
				}else{
					error.add("MINIMUM REFEREES- "+jsonResponse.min_years+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "MINIMUM YEARS- "+jsonResponse.min_years+ " is NOT verified successfully in Sequel Pro database");
				}
				if(row["min_referees"]==jsonResponse.min_referees){
					if(iCounter==1){
						objReportingLog.logInfo("Info", "MINIMUM REFEREES- "+jsonResponse.min_referees+ " is verified successfully in Sequel Pro database");
					}
				}else{
					error.add("MINIMUM REFEREES- "+jsonResponse.min_referees+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "MINIMUM REFEREES- "+jsonResponse.min_referees+ " is NOT verified successfully in Sequel Pro database");
				}
				if(row["note_to_candidate"].toString().equals(jsonResponse.note_to_candidate.toString())){
					if(iCounter==1){
						objReportingLog.logInfo("Info", "NOTE TO CANDIDATE- "+jsonResponse.note_to_candidate.toString()+ " is verified successfully in Sequel Pro database");
					}
				}else{
					error.add("NOTE TO CANDIDATE- "+jsonResponse.note_to_candidate.toString()+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "NOTE TO CANDIDATE- "+jsonResponse.note_to_candidate.toString()+ " is NOT verified successfully in Sequel Pro database");
				}
				if(row["note_to_referee"].toString().equals(jsonResponse.note_to_referee.toString())){
					if(iCounter==1){
						objReportingLog.logInfo("Info", "NOTE TO REFEREE- "+jsonResponse.note_to_referee.toString()+ " is verified successfully in Sequel Pro database");
					}
				}else{
					error.add("NOTE TO REFEREE- "+jsonResponse.note_to_referee.toString()+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "NOTE TO REFEREE- "+jsonResponse.note_to_referee.toString()+ " is NOT verified successfully in Sequel Pro database");
				}
				int intPeriodType,iMap;
				for(iMap=0;iMap&lt;jsonResponse.mappings.size();iMap++){
					if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Employment")){
						intPeriodType=17;
					}else if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Travel")){
						intPeriodType=20;
					}else if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Unemployed - claiming Benefits")){
						intPeriodType=21;
					}else if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Unemployed - not claiming Benefits")){
						intPeriodType=22;
					}else if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Voluntary")){
						intPeriodType=23;
					}else if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Academic")){
						intPeriodType=26;
					}else if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Character")){
						intPeriodType=27;
					}
					if(row["period_type_id"]==intPeriodType){
						objReportingLog.logInfo("Info", "PERIOD TYPE ID- "+jsonResponse.mappings[iMap].period_type_name.toString()+ " is verified successfully in Sequel Pro database");
						if(row["questionnaire_id"]==jsonResponse.mappings[iMap].questionnaire_id){
							objReportingLog.logInfo("Info", "QUESTIONNAIRE ID- "+jsonResponse.mappings[iMap].questionnaire_id+ " is verified successfully in Sequel Pro database");
						}else{
							error.add("QUESTIONNAIRE ID- "+jsonResponse.mappings[iMap].questionnaire_id+ " is NOT verified successfully in Sequel Pro database");
							objReportingLog.logInfo("Error", "QUESTIONNAIRE ID- "+jsonResponse.mappings[iMap].questionnaire_id+ " is NOT verified successfully in Sequel Pro database");
						}
						break;
					}	
				}
				if(iMap==jsonResponse.mappings.size()){
					error.add("PERIOD TYPE ID- "+jsonResponse.mappings[iMap].period_type_name.toString()+ " is NOT verified successfully in Sequel Pro database for CRITERION ID- "+jsonResponse.id.toString());
					objReportingLog.logInfo("Error", "PERIOD TYPE ID- "+jsonResponse.mappings[iMap].period_type_name.toString()+ " is NOT verified successfully in Sequel Pro database for CRITERION ID- "+jsonResponse.id.toString());
				}
			}else{
				objReportingLog.logInfo("Error", "CRITERION ID- "+jsonResponse.id.toString()+ " is NOT found successfully in Sequel Pro database");
				error.add("CRITERION ID- "+jsonResponse.id.toString()+ " is NOT found successfully in Sequel Pro database");
			}
			return;
		}	
	}else{
		error.add("No records fetched for query-" +sqlQuery+" in Sequel Pro database");
	}
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="998094d8-71c6-472d-a8a1-cbd839f79be9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_CriterionID" searchProperties="true"><con:settings/><con:testStep type="groovy" name="modifyEndPoint_CriterionID" id="44d2de4a-3940-4788-a96e-f225c584eaad"><con:settings/><con:config><script>def localFileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables") 
def strEndPoint=localFileProperties.getPropertyValue("EndPoint")
def strRequestName=localFileProperties.getPropertyValue("Request_Name");
def strCriterionID=localFileProperties.getPropertyValue("Criterion_ID").toString();
def strModifiedEndPoint=strEndPoint+"/"+strCriterionID;

testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint(strModifiedEndPoint);
</script></con:config></con:testStep><con:testStep type="httprequest" name="OpenAPI_CriterionID" id="a0806c68-4679-4514-96d4-8961bcb7f5db"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="4a6d41ec-5299-4b5d-94f9-9d9b09f183a5" name="OpenAPI_CriterionID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/criterion/554</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_CriterionID" id="a922e904-caa1-486c-92d0-ff37175d99a6"><con:settings/><con:config><script>def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
def strCriterionID=objLocalVariablesPath.getPropertyValue("Criterion_ID").toString();
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("CRITERION ID",strCriterionID);
error = []
if(objLocalVariablesPath.getPropertyValue("Error")==null){
	def sqlQuery="select t1.id,t1.name,t1.min_referees,t1.min_years,t1.min_referees,t1.note_to_candidate,t1.note_to_referee,t2.questionnaire_id,t2.period_type_id from xref_check_xref_criteria t1  INNER JOIN xref_check_criterion_period_type_questionnaire t2 ON t1.id=t2.criterion_id where company_owner_id='"+fileProperties.getPropertyValue("Company_ID")+"' and t1.id='"+strCriterionID+"' and active='1' and user_created_not_adjusted='1'"
	checkCriterionIDFromDB(jsonResponse,sqlQuery)
}else{
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
}
if(error.size()!=0){
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
}
assert error.size() == 0

def checkCriterionIDFromDB(def jsonResponse,def sqlQuery){
	
	def sql =objUtilityFunctions.setDBConnection();
	int intSize=sql.rows(sqlQuery).size(),iCounter=0;
	
	if(intSize>0){
		sql.eachRow(sqlQuery){ row ->
			iCounter++;
			if(row["id"].toString().equals(jsonResponse.id.toString())){
				if(iCounter==1){
					objReportingLog.logInfo("Info", "CRITERION ID- "+jsonResponse.id.toString()+ " is verified successfully in Sequel Pro database");
				}
				if(row["name"].toString().equals(jsonResponse.name.toString())){
					if(iCounter==1){
						objReportingLog.logInfo("Info", "CRITERION NAME- "+jsonResponse.name.toString()+ " is verified successfully in Sequel Pro database");
					}
				}else{
					error.add("CRITERION NAME- "+jsonResponse.name.toString()+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "CRITERION NAME- "+jsonResponse.name.toString()+ " is NOT verified successfully in Sequel Pro database");
				}
				if(row["min_years"]==jsonResponse.min_years){
					if(iCounter==1){
						objReportingLog.logInfo("Info", "MINIMUM YEARS- "+jsonResponse.min_years+ " is verified successfully in Sequel Pro database");
					}
				}else{
					error.add("MINIMUM REFEREES- "+jsonResponse.min_years+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "MINIMUM YEARS- "+jsonResponse.min_years+ " is NOT verified successfully in Sequel Pro database");
				}
				if(row["min_referees"]==jsonResponse.min_referees){
					if(iCounter==1){
						objReportingLog.logInfo("Info", "MINIMUM REFEREES- "+jsonResponse.min_referees+ " is verified successfully in Sequel Pro database");
					}
				}else{
					error.add("MINIMUM REFEREES- "+jsonResponse.min_referees+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "MINIMUM REFEREES- "+jsonResponse.min_referees+ " is NOT verified successfully in Sequel Pro database");
				}
				if(row["note_to_candidate"].toString().equals(jsonResponse.note_to_candidate.toString())){
					if(iCounter==1){
						objReportingLog.logInfo("Info", "NOTE TO CANDIDATE- "+jsonResponse.note_to_candidate.toString()+ " is verified successfully in Sequel Pro database");
					}
				}else{
					error.add("NOTE TO CANDIDATE- "+jsonResponse.note_to_candidate.toString()+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "NOTE TO CANDIDATE- "+jsonResponse.note_to_candidate.toString()+ " is NOT verified successfully in Sequel Pro database");
				}
				if(row["note_to_referee"].toString().equals(jsonResponse.note_to_referee.toString())){
					if(iCounter==1){
						objReportingLog.logInfo("Info", "NOTE TO REFEREE- "+jsonResponse.note_to_referee.toString()+ " is verified successfully in Sequel Pro database");
					}
				}else{
					error.add("NOTE TO REFEREE- "+jsonResponse.note_to_referee.toString()+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "NOTE TO REFEREE- "+jsonResponse.note_to_referee.toString()+ " is NOT verified successfully in Sequel Pro database");
				}
				int intPeriodType,iMap;
				for(iMap=0;iMap&lt;jsonResponse.mappings.size();iMap++){
					if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Employment")){
						intPeriodType=17;
					}else if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Travel")){
						intPeriodType=20;
					}else if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Unemployed - claiming Benefits")){
						intPeriodType=21;
					}else if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Unemployed - not claiming Benefits")){
						intPeriodType=22;
					}else if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Voluntary")){
						intPeriodType=23;
					}else if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Academic")){
						intPeriodType=26;
					}else if(jsonResponse.mappings[iMap].period_type_name.toString().equalsIgnoreCase("Character")){
						intPeriodType=27;
					}
					if(row["period_type_id"]==intPeriodType){
						objReportingLog.logInfo("Info", "PERIOD TYPE ID- "+jsonResponse.mappings[iMap].period_type_name.toString()+ " is verified successfully in Sequel Pro database");
						if(row["questionnaire_id"]==jsonResponse.mappings[iMap].questionnaire_id){
							objReportingLog.logInfo("Info", "QUESTIONNAIRE ID- "+jsonResponse.mappings[iMap].questionnaire_id+ " is verified successfully in Sequel Pro database");
						}else{
							error.add("QUESTIONNAIRE ID- "+jsonResponse.mappings[iMap].questionnaire_id+ " is NOT verified successfully in Sequel Pro database");
							objReportingLog.logInfo("Error", "QUESTIONNAIRE ID- "+jsonResponse.mappings[iMap].questionnaire_id+ " is NOT verified successfully in Sequel Pro database");
						}
						break;
					}	
				}
				if(iMap==jsonResponse.mappings.size()){
					error.add("PERIOD TYPE ID- "+jsonResponse.mappings[iMap].period_type_name.toString()+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "PERIOD TYPE ID- "+jsonResponse.mappings[iMap].period_type_name.toString()+ " is NOT verified successfully in Sequel Pro database");
				}
			}else{
				objReportingLog.logInfo("Error", "CRITERION ID- "+jsonResponse.id.toString()+ " is NOT found successfully in Sequel Pro database");
				error.add("USER ID- "+jsonResponse.id.toString()+ " is NOT found successfully in Sequel Pro database");
			}
			return;
		}	
	}else{
		error.add("No records fetched for query-" +sqlQuery+" in Sequel Pro database");
	}
}
	</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ec07d95a-b38f-4a6d-91ac-4753462f30e6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_Delete_Criteria" searchProperties="true"><con:settings/><con:testStep type="groovy" name="modifyEndPoint_Delete_CriterionID" id="783aee50-5530-4ab7-8fed-cc3a6790e766"><con:settings/><con:config><script>def localFileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables") 
def strEndPoint=localFileProperties.getPropertyValue("EndPoint")
def strRequestName=localFileProperties.getPropertyValue("Request_Name");
def strCriterionID=localFileProperties.getPropertyValue("Criterion_ID").toString();
def strModifiedEndPoint=strEndPoint+"/"+strCriterionID;

testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint(strModifiedEndPoint);
</script></con:config></con:testStep><con:testStep type="httprequest" name="OpenAPI_Delete_Criteria" id="2ca7101c-4e28-4699-ae55-1ca8b9800f60"><con:settings/><con:config method="DELETE" xsi:type="con:HttpRequest" id="e78caebb-74c1-4227-a643-ecb7494949eb" name="OpenAPI_Delete_Criteria" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/criterion/10000</con:endpoint><con:request>{
  "email": "abhishek.dhingra@xref.com",
  "password": "Jul@2017"
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_CriteriaDeleted" id="1cdbb2df-fa51-4638-bcb9-a3753e226aad"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
def strCriterionID=objLocalVariablesPath.getPropertyValue("Criterion_ID").toString();
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
error = [];

strRequestName=objLocalVariablesPath.getPropertyValue("Request_Name");
def responseContent = testRunner.testCase.getTestStepByName(strRequestName).getPropertyValue("response")
if(responseContent!=null){
	def jsonResponse = new JsonSlurper().parseText(responseContent);
}else{
	responseContent="NO Response Content since the Criteria - "+strCriterionID+" was NOT Deleted successfully"
}

objLocalVariablesPath.setPropertyValue("Json_Response",responseContent)
def responseStatusHeader=testRunner.testCase.getTestStepByName(strRequestName).testRequest.response.getResponseHeaders()
if(responseStatusHeader["#status#"]==['HTTP/1.1 200 OK']){
	objReportingLog.logInfo("Info","Criteria- "+strCriterionID+" has been Deleted/Deactivated successfully");
}else{
	error.add("Response Status is - "+responseStatusHeader["#status#"])
	objLocalVariablesPath.setPropertyValue("Error",error.toString())
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
	objReportingLog.logInfo("Error", " Response error- "+error.toString())
}
assert error.size() == 0
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7869e61b-48fc-49bd-99cf-150711015005" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_Questionnaires" searchProperties="true"><con:settings/><con:testStep type="httprequest" name="OpenAPI_Questionnaires" id="24f4c4b6-370c-459a-9824-f7a1237532ba"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="6c3dfbef-19b9-47f0-9fa4-0a98c2d00153" name="OpenAPI_Questionnaires" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/questionnaires?search=candidate my questionnaire Bino&amp;limit=5&amp;page=1</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_Questionnaires" id="84586806-f429-481e-8f47-d8139dea8a08"><con:settings/><con:config><script>import groovy.json.JsonSlurper
def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
strRequestName=objLocalVariablesPath.getPropertyValue("Request_Name");
blnQueryRun=true; 
arrJsonQuestionnaireID=[];
arrSQLQuestionnaireID=[];

boolean blnHasNextPage=true;
int iJson=0,iCounter=1;
def strJsonResponse="========================================== PAGE - 1 =========================================\n";
error = [];
//verify the slurper isn't empty
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("","");
if(objLocalVariablesPath.getPropertyValue("Error")==null){
	if(jsonResponse.pages.total >0){
		objReportingLog.logInfo("", "\n====================================== PAGE - 1 ============================================");
		while(blnHasNextPage){
			if(iJson!=0){
				if(jsonResponse.pages.links.next.toString()!=""){
					def strEnv=fileProperties.getPropertyValue("Environment");
					testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint("https://api-open-"+strEnv.toLowerCase()+".xref.com"+jsonResponse.pages.links.next.toString());
					testRunner.testCase.getTestStepByName(strRequestName).run(testRunner, context)
					responseContent = testRunner.testCase.getTestStepByName(strRequestName).getPropertyValue("response")
					jsonResponse = new JsonSlurper().parseText(responseContent);
					blnHasNextPage=true;
					iJson=0;
				}else{
					blnHasNextPage=false;
				}
			}
			iCounter=iCounter+1;
			while(jsonResponse.data[iJson]!=null){
				arrJsonQuestionnaireID.add(jsonResponse.data[iJson].id.toString());
				checkQuestionnaireIDFromDB(jsonResponse.data[iJson]);
				iJson=iJson+1;
			}
			if(blnHasNextPage &amp;&amp; iCounter&lt;=jsonResponse.pages.total+1){
				if(iCounter&lt;jsonResponse.pages.total+1){
					objReportingLog.logInfo("", "\n======================================== PAGE - "+iCounter+" =========================================");
					strJsonResponse=strJsonResponse+jsonResponse.toString()+"\n\n========================================= PAGE - "+iCounter+" ==========================================\n";	
				}else{
					objReportingLog.logInfo("", "\n===============================================================================================");
					strJsonResponse=strJsonResponse+jsonResponse.toString()+"\n==============================================================================================\n";
				}
			}
		}
		objLocalVariablesPath.setPropertyValue("Json_Response",strJsonResponse.toString())
		if(error.size()!=0){
			objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
			objReportingLog.logInfo("Error", " Response error- "+error.toString())
		}else{
			objUtilityFunctions.compareListArrays(arrJsonQuestionnaireID,arrSQLQuestionnaireID,"Questionnaire ID")
			if(objLocalVariablesPath.getPropertyValue("Error")!=null){
				error.add(objLocalVariablesPath.getPropertyValue("Error"));
			}	
		}
	}else{
		error.add("Total number of pages found in the JSON response is 0");
		objReportingLog.logInfo("Error", "Total number of pages found in the JSON response is 0");
	}	
}else{
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
}
if(error.size()!=0){
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
}
assert error.size() == 0

def checkQuestionnaireIDFromDB(def jsonResponse){
	
	def sqlQuery="select * from questionaries where id IN(select questionary_id from `employers_questionaries` where employer_id IN (select user_id from user where company_id='"+fileProperties.getPropertyValue("Company_ID")+"')) and active='1' and id='"+jsonResponse.id+"'"
	def sql =objUtilityFunctions.setDBConnection();
	int intSize=sql.rows(sqlQuery).size();
	if(intSize>0){
		sql.eachRow(sqlQuery){ row ->
			arrSQLQuestionnaireID.add(row["id"].toString());
			if(row["id"].toString().equals(jsonResponse.id.toString())){
				objReportingLog.logInfo("Info", "QUESTIONNAIRE ID- "+jsonResponse.id.toString()+ " is verified successfully in Sequel Pro database");
				if(row["title"].toString().equals(jsonResponse.title.toString())){
					objReportingLog.logInfo("Info", "QUESTIONNAIRE TITLE- "+jsonResponse.title.toString()+ " is verified successfully in Sequel Pro database");
				}else{
					error.add("QUESTIONNAIRE TITLE- "+jsonResponse.name.toString()+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "QUESTIONNAIRE TITLE- "+jsonResponse.title.toString()+ " is NOT verified successfully in Sequel Pro database");
				}
			}else{
				objReportingLog.logInfo("Error", "QUESTIONNAIRE ID- "+jsonResponse.id.toString()+ " is NOT found successfully in Sequel Pro database");
				error.add("QUESTIONNAIRE ID- "+jsonResponse.id.toString()+ " is NOT verfied successfully in Sequel Pro database");
			}
			return;
		}	
	}else{
		error.add("No records fetched for query-" +sqlQuery+" in Sequel Pro database");
	}
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ac6c4f91-e30f-44bf-9d81-2ca72ddf5c61" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_QuestionnaireID" searchProperties="true"><con:settings/><con:testStep type="groovy" name="modifyEndPoint_QuestionnaireID" id="a036ff40-af20-415b-9c59-38be97557bf0"><con:settings/><con:config><script>def localFileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables") 
def strEndPoint=localFileProperties.getPropertyValue("EndPoint")
def strRequestName=localFileProperties.getPropertyValue("Request_Name");
def strQuestionnaireID=localFileProperties.getPropertyValue("Questionnaire_ID").toString();
def strModifiedEndPoint=strEndPoint+"/"+strQuestionnaireID;

testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint(strModifiedEndPoint);
</script></con:config></con:testStep><con:testStep type="httprequest" name="OpenAPI_QuestionnaireID" id="f8106a6c-b0b1-45fc-bfbf-30535378c91f"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="87ec4209-3de9-438e-9552-db76b8306b09" name="OpenAPI_QuestionnaireID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/questionnaire/753</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_QuestionnaireID" id="5a33f56e-c227-427d-9106-b202838a2b70"><con:settings/><con:config><script>def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
def strQuestionnaireID=objLocalVariablesPath.getPropertyValue("Questionnaire_ID").toString();
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("QUESTIONNAIRE ID",strQuestionnaireID);
error = []
if(objLocalVariablesPath.getPropertyValue("Error")==null){
	verifyQuestionnaireIDFromDB(jsonResponse)
}else{
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
}
if(error.size()!=0){
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
}
assert error.size() == 0

def verifyQuestionnaireIDFromDB(def jsonResponse){
	def sqlQuery="select * from questionaries where id IN(select questionary_id from `employers_questionaries` where employer_id IN (select user_id from user where company_id='"+fileProperties.getPropertyValue("Company_ID")+"')) and active='1' and id='"+jsonResponse.id+"'"
	def sql =objUtilityFunctions.setDBConnection();
	int intSize=sql.rows(sqlQuery).size();
	if(intSize>0){
		sql.eachRow(sqlQuery){ row ->
			if(row["id"].toString().equals(jsonResponse.id.toString())){
				objReportingLog.logInfo("Info", "QUESTIONNAIRE ID- "+jsonResponse.id.toString()+ " is verified successfully in Sequel Pro database");
				if(row["title"].toString().equals(jsonResponse.title.toString())){
					objReportingLog.logInfo("Info", "QUESTIONNAIRE TITLE- "+jsonResponse.title.toString()+ " is verified successfully in Sequel Pro database");
				}else{
					error.add("QUESTIONNAIRE TITLE- "+jsonResponse.name.toString()+ " is NOT verified successfully in Sequel Pro database");
					objReportingLog.logInfo("Error", "QUESTIONNAIRE TITLE- "+jsonResponse.title.toString()+ " is NOT verified successfully in Sequel Pro database");
				}
			}else{
				objReportingLog.logInfo("Error", "QUESTIONNAIRE ID- "+jsonResponse.id.toString()+ " is NOT found successfully in Sequel Pro database");
				error.add("QUESTIONNAIRE ID- "+jsonResponse.id.toString()+ " is NOT verfied successfully in Sequel Pro database");
			}
			return;
		}	
	}else{
		error.add("No records fetched for query-" +sqlQuery+" in Sequel Pro database");
	}
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1d0fb2d0-5545-4f69-8c4a-9aaaa6b4b8da" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_Delete_Questionnaire" searchProperties="true"><con:settings/><con:testStep type="groovy" name="modifyEndPoint_Delete_Questionnaire" id="d05cad7e-d6ca-47a9-8c00-888d4fd71124"><con:settings/><con:config><script>def localFileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables") 
def strEndPoint=localFileProperties.getPropertyValue("EndPoint")
def strRequestName=localFileProperties.getPropertyValue("Request_Name");
def strCriterionID=localFileProperties.getPropertyValue("Questionnaire_ID").toString();
def strModifiedEndPoint=strEndPoint+"/"+strCriterionID;

testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint(strModifiedEndPoint);
</script></con:config></con:testStep><con:testStep type="httprequest" name="OpenAPI_Delete_Questionnaire" id="17d1115a-7cb7-4d48-9215-a1f93fcca929"><con:settings/><con:config method="DELETE" xsi:type="con:HttpRequest" id="e78caebb-74c1-4227-a643-ecb7494949eb" name="OpenAPI_Delete_Questionnaire" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/questionnaire/753</con:endpoint><con:request>{
  "email": "abhishek.dhingra@xref.com",
  "password": "Jul@2017"
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_QuestionnaireDeleted" id="953a715b-80d1-49cf-916a-c88b9cc2e6b2"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
def strQuestionnaireID=objLocalVariablesPath.getPropertyValue("Questionnaire_ID").toString();
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
error = [];

strRequestName=objLocalVariablesPath.getPropertyValue("Request_Name");
def responseContent = testRunner.testCase.getTestStepByName(strRequestName).getPropertyValue("response")
if(responseContent!=null){
	def jsonResponse = new JsonSlurper().parseText(responseContent);
}else{
	responseContent="NO Response Content since the Questionnaire ID - "+strQuestionnaireID+" was NOT Deleted successfully"
}

objLocalVariablesPath.setPropertyValue("Json_Response",responseContent)
def responseStatusHeader=testRunner.testCase.getTestStepByName(strRequestName).testRequest.response.getResponseHeaders()
if(responseStatusHeader["#status#"]==['HTTP/1.1 200 OK']){
	objReportingLog.logInfo("Info","Questionnaire- "+strQuestionnaireID+" has been Deleted/Deactivated successfully");
}else{
	error.add("Response Status is - "+responseStatusHeader["#status#"])
	objLocalVariablesPath.setPropertyValue("Error",error.toString())
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
	objReportingLog.logInfo("Error", " Response error- "+error.toString())
}
assert error.size() == 0
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ff2bbbf3-c3a1-4880-a573-7f443f296b67" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_Checks" searchProperties="true"><con:settings/><con:testStep type="groovy" name="modifyEndpoint_Check_Search" id="353755d5-84ef-4d95-85ea-e52a6c859de7"><con:settings/><con:config><script>def localFileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables") 
def strEndPoint=localFileProperties.getPropertyValue("EndPoint")
def strRequestName=localFileProperties.getPropertyValue("Request_Name");
def strFirstName=localFileProperties.getPropertyValue("firstName_search");
def strLastName=localFileProperties.getPropertyValue("lastName_search");

def strFullNameSearch="";

if(strFirstName!=null){
	localFileProperties.setPropertyValue("firstName_search",strFirstName);
	strFullNameSearch=strFullNameSearch+strFirstName;
	
}
if(strLastName!=null){
	localFileProperties.setPropertyValue("lastName_search",strLastName);
	if(strFullNameSearch!=null){
		strFullNameSearch=strFullNameSearch+" "+strLastName;
	}else{
		strFullNameSearch=strLastName;
	}
}

if(strFullNameSearch!=null){
	def strModifiedEndPoint=strEndPoint+"&amp;search="+strFullNameSearch;
	testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint(strModifiedEndPoint);
}</script></con:config></con:testStep><con:testStep type="httprequest" name="OpenAPI_Checks" id="6ec64ba3-f051-4c08-8e7a-1f8e39e1847b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="ba21bc98-d7ef-4d3d-81ab-04e2ab8b677e" name="OpenAPI_Checks" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint><![CDATA[https://api-open-dev.xref.com/checks?states=requested&search=&requester=1&date_start=&date_end=&limit=5&page=5]]></con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_Checks" id="a1e7e3ec-cc8d-445e-95e1-d31ff3dc25fe"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
strRequestName=objLocalVariablesPath.getPropertyValue("Request_Name");
blnQueryRun=true; 
arrJsonCheckID=[];
arrSQLCheckID=[];

boolean blnHasNextPage=true;
int iJson=0,iCounter=1;
def strJsonResponse="========================================== PAGE - 1 ==========================================\n";
error = [];
//verify the slurper isn't empty
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("","");
if(objLocalVariablesPath.getPropertyValue("Error")==null){
	if(jsonResponse.pages.total >0){
		objReportingLog.logInfo("", "\n====================================== PAGE - 1 ============================================");
		while(blnHasNextPage){
			if(iJson!=0){
				if(jsonResponse.pages.links.next.toString()!=""){
					def strEnv=fileProperties.getPropertyValue("Environment");
					testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint("https://api-open-"+strEnv.toLowerCase()+".xref.com"+jsonResponse.pages.links.next.toString());
					testRunner.testCase.getTestStepByName(strRequestName).run(testRunner, context)
					responseContent = testRunner.testCase.getTestStepByName(strRequestName).getPropertyValue("response")
					jsonResponse = new JsonSlurper().parseText(responseContent);
					blnHasNextPage=true;
					iJson=0;
				}else{
					blnHasNextPage=false;
				}
			}
			iCounter=iCounter+1;
			while(jsonResponse.data[iJson]!=null){
				arrJsonCheckID.add(jsonResponse.data[iJson].id.toString());
				checkQuestionnaireIDFromDB(jsonResponse.data[iJson]);
				iJson=iJson+1;
			}
			if(iJson==0){
				iJson=iJson+1;	
				error.add("No JSON Response is fetched for the page "+jsonResponse.pages.links.next.toString());
				objReportingLog.logInfo("Error", "No JSON Response is fetched for the page "+jsonResponse.pages.links.next.toString());
			}
			if(blnHasNextPage && iCounter<=jsonResponse.pages.total+1){
				if(iCounter<jsonResponse.pages.total+1){
					objReportingLog.logInfo("", "\n======================================== PAGE - "+iCounter+" =========================================");
					strJsonResponse=strJsonResponse+jsonResponse.toString()+"\n\n========================================= PAGE - "+iCounter+" ==========================================\n";	
				}else{
					objReportingLog.logInfo("", "\n===============================================================================================");
					strJsonResponse=strJsonResponse+jsonResponse.toString()+"\n===============================================================================================\n";
				}
			}
		}
		objLocalVariablesPath.setPropertyValue("Json_Response",strJsonResponse.toString())
		if(error.size()!=0){
			objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
			objReportingLog.logInfo("Error", " Response error- "+error.toString())
		}else{
			objUtilityFunctions.compareListArrays(arrJsonCheckID,arrSQLCheckID,"Check ID")
			if(objLocalVariablesPath.getPropertyValue("Error")!=null){
				error.add(objLocalVariablesPath.getPropertyValue("Error"));
			}	
		}
	}else{
		error.add("Total number of pages found in the JSON response is 0");
		objReportingLog.logInfo("Error", "Total number of pages found in the JSON response is 0");
	}
}else{
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
}
if(error.size()!=0){
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
}
assert error.size() == 0

def checkQuestionnaireIDFromDB(def jsonResponse){
	int iCounter=0;
	def sqlQuery;
	if(jsonResponse.xref==null){
		sqlQuery="select t1.id as check_id,t1.employer_id,t1.xref_id,t2.first_name as emp_first_name,t2.last_name as emp_last_name,t2.email as emp_email,t3.first_name as can_first_name,t3.last_name as can_last_name,t3.email as can_email from xref_check t1 INNER JOIN user t2 on t1.employer_id=t2.user_id INNER JOIN user t3 on t1.candidate_id=t3.user_id  where t1.id='"+jsonResponse.id+"'" 		
	}else{
		if(jsonResponse.xref.referees.size()==0){
			sqlQuery="select t1.id as check_id,t1.employer_id,t1.xref_id,t2.first_name as emp_first_name,t2.last_name as emp_last_name,t2.email as emp_email,t3.first_name as can_first_name,t3.last_name as can_last_name,"+
			"t3.email as can_email,t4.state as xref_state,t4.criterion_id, t7.name as criterion_name,t7.min_years,t7.min_referees from xref_check t1 INNER JOIN user t2 on t1.employer_id=t2.user_id INNER JOIN user t3 on t1.candidate_id=t3.user_id "+ 
			"INNER JOIN xref_check_xref t4 on t1.xref_id=t4.id INNER JOIN xref_check_xref_criteria t7 on t7.id=t4.criterion_id where t1.id='"+jsonResponse.id+"'" 
		}else{
			sqlQuery="select t1.id as check_id,t1.employer_id,t1.xref_id,t2.first_name as emp_first_name,t2.last_name as emp_last_name,t2.email as emp_email,t3.first_name as can_first_name,t3.last_name as can_last_name,"+
			"t3.email as can_email,t4.state as xref_state,t4.criterion_id, t7.name as criterion_name,t7.min_years,t7.min_referees,t5.job_title as ref_job_title,t6.first_name as ref_first_name,t6.last_name as ref_last_name,"+
			"t6.email as ref_email,t5.state as ref_state from xref_check t1 INNER JOIN user t2 on t1.employer_id=t2.user_id INNER JOIN user t3 on t1.candidate_id=t3.user_id INNER JOIN xref_check_xref t4 on t1.xref_id=t4.id "+ 
			"INNER JOIN xref_check_xref_criteria t7 on t7.id=t4.criterion_id INNER JOIN user_referee t5 on t5.xref_id=t1.xref_id INNER JOIN user t6 on t5.user_id =t6.user_id where t1.id='"+jsonResponse.id+"'" 
		}
		if(objLocalVariablesPath.getPropertyValue("url_states").equalsIgnoreCase("completed")){
			sqlQuery=sqlQuery +" and t4.state = '4'"
		}else if(objLocalVariablesPath.getPropertyValue("url_states").equalsIgnoreCase("requested")){
			sqlQuery=sqlQuery +" and t4.state = '0'"
		}else if(objLocalVariablesPath.getPropertyValue("url_states").equalsIgnoreCase("in_progress")){
			sqlQuery=sqlQuery +" and t4.state = '2'"
		}else if(objLocalVariablesPath.getPropertyValue("url_states").equalsIgnoreCase("expired")){
			sqlQuery=sqlQuery +" and t4.state = '3'"
		}else if(objLocalVariablesPath.getPropertyValue("url_states").equalsIgnoreCase("stopped")){
			sqlQuery=sqlQuery +" and t4.state = '5'"
		}
	}
	if(objLocalVariablesPath.getPropertyValue("url_requester").equalsIgnoreCase("1")){
		sqlQuery=sqlQuery +" and t2.email = '"+objLocalVariablesPath.getPropertyValue("User_Id")+"'"
	}
	if(objLocalVariablesPath.getPropertyValue("firstName_search")!=null){
		sqlQuery=sqlQuery +" and (t3.first_name LIKE '"+objLocalVariablesPath.getPropertyValue("firstName_search")+"%' or t2.first_name LIKE '"+objLocalVariablesPath.getPropertyValue("firstName_search")+"%')"
	}
	if(objLocalVariablesPath.getPropertyValue("lastName_Search")!=null){
		sqlQuery=sqlQuery +" and (t3.last_name LIKE '"+objLocalVariablesPath.getPropertyValue("lastName_Search")+"%' or t2.last_name LIKE '"+objLocalVariablesPath.getPropertyValue("lastName_Search")+"%')"
	}
	def sql =objUtilityFunctions.setDBConnection();
	int intSize=sql.rows(sqlQuery).size();
	if(intSize>0){
		sql.eachRow(sqlQuery){ row ->
			iCounter++;
			if(row["check_id"].toString().equals(jsonResponse.id.toString())){
				if(iCounter==1){
					arrSQLCheckID.add(row["check_id"].toString());
					objReportingLog.logInfo("Info", "CHECK ID- "+jsonResponse.id.toString()+ " is verified successfully in Sequel Pro database");
					if(row["employer_id"].toString().equals(jsonResponse.requester.id.toString())){
						objReportingLog.logInfo("Info", "EMPLOYER ID- "+jsonResponse.requester.id.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("EMPLOYER ID- "+jsonResponse.requester.id.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "EMPLOYER ID- "+jsonResponse.requester.id.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(row["emp_first_name"].toString().equals(jsonResponse.requester.first_name.toString())){
						objReportingLog.logInfo("Info", "EMPLOYER FIRST NAME- "+jsonResponse.requester.first_name.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("EMPLOYER FIRST NAME- "+jsonResponse.requester.first_name.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "EMPLOYER FIRST NAME- "+jsonResponse.requester.first_name.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(row["emp_last_name"].equals(jsonResponse.requester.last_name.toString())){
						objReportingLog.logInfo("Info", "EMPLOYER LAST NAME- "+jsonResponse.requester.last_name.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("EMPLOYER LAST NAME- "+jsonResponse.requester.last_name.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "EMPLOYER LAST NAME- "+jsonResponse.requester.last_name.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(row["emp_email"].toString().equals(jsonResponse.requester.email.toString())){
						objReportingLog.logInfo("Info", "EMPLOYER EMAIL- "+jsonResponse.requester.email.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("EMPLOYER EMAIL- "+jsonResponse.requester.email.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "EMPLOYER EMAIL- "+jsonResponse.requester.email.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(row["can_first_name"].toString().equals(jsonResponse.candidate.first_name.toString())){
						objReportingLog.logInfo("Info", "CANDIDATE FIRST NAME- "+jsonResponse.candidate.first_name.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("CANDIDATE FIRST NAME- "+jsonResponse.candidate.first_name.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "CANDIDATE FIRST NAME- "+jsonResponse.candidate.first_name.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(row["can_last_name"].equals(jsonResponse.candidate.last_name.toString())){
						objReportingLog.logInfo("Info", "CANDIDATE LAST NAME- "+jsonResponse.candidate.last_name.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("CANDIDATE LAST NAME- "+jsonResponse.candidate.last_name.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "CANDIDATE LAST NAME- "+jsonResponse.candidate.last_name.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(row["can_email"].toString().equals(jsonResponse.candidate.email.toString())){
						objReportingLog.logInfo("Info", "CANDIDATE EMAIL- "+jsonResponse.candidate.email.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("CANDIDATE EMAIL- "+jsonResponse.candidate.email.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "CANDIDATE EMAIL- "+jsonResponse.candidate.email.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(jsonResponse.xref!=null){
						def strXrefStatus;
						if(row["xref_state"]==4){
							strXrefStatus="completed"
						}else if(row["xref_state"]==0){
							strXrefStatus="requested"	
						}else if(row["xref_state"]==2){
							strXrefStatus="in_progress"		
						}else if(row["xref_state"]==3){
							strXrefStatus="expired"	
						}else if(row["xref_state"]==5){
							strXrefStatus="stopped"	
						}else{
							error.add("XREF STATUS "+row["xref_state"]+" NOT FOUND in Json Response");
							objReportingLog.logInfo("Error","XREF STATUS "+row["xref_state"]+" NOT FOUND in Json Response");
						}
						if(strXrefStatus.equalsIgnoreCase(jsonResponse.xref.state.toString())){
							objReportingLog.logInfo("Info", "XREF STATUS- "+jsonResponse.xref.state.toString()+ " is verified successfully in Sequel Pro database");
						}else{
							error.add("XREF STATUS- "+jsonResponse.xref.state.toString()+ " is verified successfully in Sequel Pro database");
							objReportingLog.logInfo("Error", "CANDIDATE EMAIL- "+jsonResponse.candidate.email.toString()+ " is NOT verified successfully in Sequel Pro database");
						}
						if(row["criterion_id"].toString().equals(jsonResponse.xref.criterion.id.toString())){
							objReportingLog.logInfo("Info", "CRITERION ID- "+jsonResponse.xref.criterion.id.toString()+ " is verified successfully in Sequel Pro database");
						}else{
							error.add("CRITERION ID- "+jsonResponse.xref.criterion.id.toString()+ " is NOT verified successfully in Sequel Pro database");
							objReportingLog.logInfo("Error", "CRITERION ID- "+jsonResponse.xref.criterion.id.toString()+ " is NOT verified successfully in Sequel Pro database");
						}
						if(row["criterion_name"].toString().equals(jsonResponse.xref.criterion.name.toString())){
							objReportingLog.logInfo("Info", "CRITERION NAME- "+jsonResponse.xref.criterion.name.toString()+ " is verified successfully in Sequel Pro database");
						}else{
							error.add("CRITERION NAME- "+jsonResponse.xref.criterion.name.toString()+ " is NOT verified successfully in Sequel Pro database");
							objReportingLog.logInfo("Error", "CRITERION NAME- "+jsonResponse.xref.criterion.name.toString()+ " is NOT verified successfully in Sequel Pro database");
						}
						if(row["min_years"].toString().equals(jsonResponse.xref.criterion.min_years.toString())){
							objReportingLog.logInfo("Info", "CRITERION MIN YEARS- "+jsonResponse.xref.criterion.min_years.toString()+ " is verified successfully in Sequel Pro database");
						}else{
							error.add("CRITERION MIN YEARS- "+jsonResponse.xref.criterion.min_years.toString()+ " is NOT verified successfully in Sequel Pro database");
							objReportingLog.logInfo("Error", "CRITERION MIN YEARS- "+jsonResponse.xref.criterion.min_years.toString()+ " is NOT verified successfully in Sequel Pro database");
						}
						if(row["min_referees"].toString().equals(jsonResponse.xref.criterion.min_referees.toString())){
							objReportingLog.logInfo("Info", "CRITERION MIN REFEREES- "+jsonResponse.xref.criterion.min_referees.toString()+ " is verified successfully in Sequel Pro database");
						}else{
							error.add("CRITERION MIN REFEREES- "+jsonResponse.xref.criterion.min_referees.toString()+ " is NOT verified successfully in Sequel Pro database");
							objReportingLog.logInfo("Error", "CRITERION MIN REFEREES- "+jsonResponse.xref.criterion.min_referees.toString()+ " is NOT verified successfully in Sequel Pro database");
						}
					}
				}
				if(jsonResponse.xref!=null){
					int intPeriodType,iRef;
					for(iRef=0;iRef<jsonResponse.xref.referees.size();iRef++){
						if((row["ref_first_name"].toString()+" "+row["ref_last_name"].toString()).equals(jsonResponse.xref.referees[iRef].name.toString())){
							objReportingLog.logInfo("Info", "REFEREE NAME- "+jsonResponse.xref.referees[iRef].name.toString()+ " is verified successfully in Sequel Pro database");
							def strRefereeState
							if(row["ref_state"]==1){
								strRefereeState="INITIAL"
							}else if(row["ref_state"]==2){
								strRefereeState="REQUESTED"	
							}else if(row["ref_state"]==3){
								strRefereeState="ANSWERED"		
							}else if(row["ref_state"]==4){
								strRefereeState="DECLINED"	
							}else if(row["ref_state"]==5){
								strRefereeState="UNOBTAINABLE"	
							}else if(row["ref_state"]==6){
								strRefereeState="ACCESSED"	
							}else if(row["ref_state"]==7){
								strRefereeState="SAVED"	
							}else if(row["ref_state"]==8){
								strRefereeState="STOPPED"	
							}else if(row["ref_state"]==9){
								strRefereeState="PREPOPULATED"	
							}else if(row["ref_state"]==10){
								strRefereeState="DETACHED"	
							}else if(row["ref_state"]==11){
								strRefereeState="STARTED"	
							}else if(row["ref_state"]==12){
								strRefereeState="AGREED"	
							}else if(row["ref_state"]==13){
								strRefereeState="VERIFIED"	
							}else if(row["ref_state"]==14){
								strRefereeState="CONFIRMED"	
							}else{
								error.add("REFEREE STATE "+row["ref_state"]+" NOT FOUND in Json Response");
								objReportingLog.logInfo("Error","REFEREE STATE "+row["ref_state"]+" NOT FOUND in Json Response");
							}
							if(strRefereeState.equalsIgnoreCase(jsonResponse.xref.referees[iRef].status.toString())){
								objReportingLog.logInfo("Info", "REFEREE STATE - "+jsonResponse.xref.referees[iRef].status.toString()+ " is verified successfully in Sequel Pro database");
							}
							if(row["ref_email"].toString().equals(jsonResponse.xref.referees[iRef].email.toString())){
								objReportingLog.logInfo("Info", "REFEREE EMAIL- "+jsonResponse.xref.referees[iRef].email.toString()+ " is verified successfully in Sequel Pro database");
							}
							break;
						}
					}
					if(iRef==jsonResponse.xref.referees.size() && jsonResponse.xref.referees.size()>0){
						error.add("SQL REFEREE NAME- "+row["ref_first_name"].toString()+" "+row["ref_last_name"].toString()+" is NOT verified successfully in JSON Response for Check ID "+jsonResponse.id);
						objReportingLog.logInfo("Error", "SQL REFEREE FIRST NAME- "+row["ref_first_name"].toString()+" "+row["ref_last_name"].toString()+" is NOT verified successfully in JSON Response for Check ID "+jsonResponse.id);
					}
				}
			}else{
				objReportingLog.logInfo("Error", "CHECK ID- "+jsonResponse.id.toString()+ " is NOT found successfully in Sequel Pro database");
				error.add("CHECK ID- "+jsonResponse.id.toString()+ " is NOT found successfully in Sequel Pro database");
			}
			return;
		}	
	}else{
		objReportingLog.logInfo("Error","No records fetched for query-" +sqlQuery+" in Sequel Pro database");
		error.add("No records fetched for query-" +sqlQuery+" in Sequel Pro database");
	}
}]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="bfd26418-19cf-4e41-bc92-4ae7b3013b73" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_CheckID" searchProperties="true"><con:settings/><con:testStep type="groovy" name="modifyEndpoint_CheckID_Search" id="c4103e80-90bb-4ca9-9fe6-81d87163ed0c"><con:settings/><con:config><script>def localFileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables") 
def strEndPoint=localFileProperties.getPropertyValue("EndPoint")
def strRequestName=localFileProperties.getPropertyValue("Request_Name");
def strCheckID=localFileProperties.getPropertyValue("Check_ID").toString();
def strModifiedEndPoint=strEndPoint+"/"+strCheckID;

testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint(strModifiedEndPoint);
</script></con:config></con:testStep><con:testStep type="httprequest" name="OpenAPI_CheckID" id="6e4432df-8da2-4776-87a5-956908576221"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="ba21bc98-d7ef-4d3d-81ab-04e2ab8b677e" name="OpenAPI_CheckID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/check/153589</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_CheckID" id="d3389c2a-8a0d-4950-b426-5496ecbab091"><con:settings/><con:config><script>def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
def strCheckID=objLocalVariablesPath.getPropertyValue("Check_ID").toString();
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("CHECK ID",strCheckID);
error = []
if(objLocalVariablesPath.getPropertyValue("Error")==null){
	if(strCheckID.toString().equals(jsonResponse.id.toString())){
		checkQuestionnaireIDFromDB(jsonResponse)
	}else{
		error.add("Input check ID - "+strCheckID+" is NOT verified in the Json response");
		objReportingLog.logInfo("Error", "Input check ID - "+strCheckID+" is NOT verified in the Json response");
	}
}else{
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
}
if(error.size()!=0){
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
}
assert error.size() == 0

def checkQuestionnaireIDFromDB(def jsonResponse){
	int iCounter=0;
	def sqlQuery;
	if(jsonResponse.xref==null){
		sqlQuery="select t1.id as check_id,t1.employer_id,t1.xref_id,t2.first_name as emp_first_name,t2.last_name as emp_last_name,t2.email as emp_email,t3.first_name as can_first_name,t3.last_name as can_last_name,t3.email as can_email from xref_check t1 INNER JOIN user t2 on t1.employer_id=t2.user_id INNER JOIN user t3 on t1.candidate_id=t3.user_id  where t1.id='"+jsonResponse.id+"'" 
	}else{
		sqlQuery="select t1.id as check_id,t1.employer_id,t1.xref_id,t2.first_name as emp_first_name,t2.last_name as emp_last_name,t2.email as emp_email,t3.first_name as can_first_name,t3.last_name as can_last_name,"+
		"t3.email as can_email,t4.state as xref_state,t4.criterion_id, t7.name as criterion_name,t7.min_years,t7.min_referees,t5.job_title as ref_job_title,t6.first_name as ref_first_name,t6.last_name as ref_last_name,"+
		"t6.email as ref_email,t5.state as ref_state from xref_check t1 INNER JOIN user t2 on t1.employer_id=t2.user_id INNER JOIN user t3 on t1.candidate_id=t3.user_id INNER JOIN xref_check_xref t4 on t1.xref_id=t4.id "+ 
		"INNER JOIN xref_check_xref_criteria t7 on t7.id=t4.criterion_id INNER JOIN user_referee t5 on t5.xref_id=t1.xref_id INNER JOIN user t6 on t5.user_id =t6.user_id where t1.id='"+jsonResponse.id+"'" 
	}
	def sql =objUtilityFunctions.setDBConnection();
	int intSize=sql.rows(sqlQuery).size();
	if(intSize>0){
		sql.eachRow(sqlQuery){ row ->
			iCounter++;
			if(row["check_id"].toString().equals(jsonResponse.id.toString())){
				if(iCounter==1){
					objReportingLog.logInfo("Info", "CHECK ID- "+jsonResponse.id.toString()+ " is verified successfully in Sequel Pro database");
					if(row["employer_id"].toString().equals(jsonResponse.requester.id.toString())){
						objReportingLog.logInfo("Info", "EMPLOYER ID- "+jsonResponse.requester.id.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("EMPLOYER ID- "+jsonResponse.requester.id.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "EMPLOYER ID- "+jsonResponse.requester.id.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(row["emp_first_name"].toString().equals(jsonResponse.requester.first_name.toString())){
						objReportingLog.logInfo("Info", "EMPLOYER FIRST NAME- "+jsonResponse.requester.first_name.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("EMPLOYER FIRST NAME- "+jsonResponse.requester.first_name.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "EMPLOYER FIRST NAME- "+jsonResponse.requester.first_name.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(row["emp_last_name"].equals(jsonResponse.requester.last_name.toString())){
						objReportingLog.logInfo("Info", "EMPLOYER LAST NAME- "+jsonResponse.requester.last_name.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("EMPLOYER LAST NAME- "+jsonResponse.requester.last_name.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "EMPLOYER LAST NAME- "+jsonResponse.requester.last_name.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(row["emp_email"].toString().equals(jsonResponse.requester.email.toString())){
						objReportingLog.logInfo("Info", "EMPLOYER EMAIL- "+jsonResponse.requester.email.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("EMPLOYER EMAIL- "+jsonResponse.requester.email.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "EMPLOYER EMAIL- "+jsonResponse.requester.email.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(row["can_first_name"].toString().equals(jsonResponse.candidate.first_name.toString())){
						objReportingLog.logInfo("Info", "CANDIDATE FIRST NAME- "+jsonResponse.candidate.first_name.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("CANDIDATE FIRST NAME- "+jsonResponse.candidate.first_name.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "CANDIDATE FIRST NAME- "+jsonResponse.candidate.first_name.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(row["can_last_name"].equals(jsonResponse.candidate.last_name.toString())){
						objReportingLog.logInfo("Info", "CANDIDATE LAST NAME- "+jsonResponse.candidate.last_name.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("CANDIDATE LAST NAME- "+jsonResponse.candidate.last_name.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "CANDIDATE LAST NAME- "+jsonResponse.candidate.last_name.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(row["can_email"].toString().equals(jsonResponse.candidate.email.toString())){
						objReportingLog.logInfo("Info", "CANDIDATE EMAIL- "+jsonResponse.candidate.email.toString()+ " is verified successfully in Sequel Pro database");
					}else{
						error.add("CANDIDATE EMAIL- "+jsonResponse.candidate.email.toString()+ " is NOT verified successfully in Sequel Pro database");
						objReportingLog.logInfo("Error", "CANDIDATE EMAIL- "+jsonResponse.candidate.email.toString()+ " is NOT verified successfully in Sequel Pro database");
					}
					if(jsonResponse.xref!=null){
						def strXrefStatus;
						if(row["xref_state"]==4){
							strXrefStatus="completed"
						}else if(row["xref_state"]==0){
							strXrefStatus="requested"	
						}else if(row["xref_state"]==2){
							strXrefStatus="in_progress"		
						}else if(row["xref_state"]==3){
							strXrefStatus="expired"	
						}else if(row["xref_state"]==5){
							strXrefStatus="stopped"	
						}else{
							error.add("XREF STATUS "+row["xref_state"]+" NOT FOUND in Json Response");
							objReportingLog.logInfo("Error","XREF STATUS "+row["xref_state"]+" NOT FOUND in Json Response");
						}
						if(strXrefStatus.equalsIgnoreCase(jsonResponse.xref.state.toString())){
							objReportingLog.logInfo("Info", "XREF STATUS- "+jsonResponse.xref.state.toString()+ " is verified successfully in Sequel Pro database");
						}else{
							error.add("XREF STATUS- "+jsonResponse.xref.state.toString()+ " is verified successfully in Sequel Pro database");
							objReportingLog.logInfo("Error", "CANDIDATE EMAIL- "+jsonResponse.candidate.email.toString()+ " is NOT verified successfully in Sequel Pro database");
						}
						if(row["criterion_id"].toString().equals(jsonResponse.xref.criterion.id.toString())){
							objReportingLog.logInfo("Info", "CRITERION ID- "+jsonResponse.xref.criterion.id.toString()+ " is verified successfully in Sequel Pro database");
						}else{
							error.add("CRITERION ID- "+jsonResponse.xref.criterion.id.toString()+ " is NOT verified successfully in Sequel Pro database");
							objReportingLog.logInfo("Error", "CRITERION ID- "+jsonResponse.xref.criterion.id.toString()+ " is NOT verified successfully in Sequel Pro database");
						}
						if(row["criterion_name"].toString().equals(jsonResponse.xref.criterion.name.toString())){
							objReportingLog.logInfo("Info", "CRITERION NAME- "+jsonResponse.xref.criterion.name.toString()+ " is verified successfully in Sequel Pro database");
						}else{
							error.add("CRITERION NAME- "+jsonResponse.xref.criterion.name.toString()+ " is NOT verified successfully in Sequel Pro database");
							objReportingLog.logInfo("Error", "CRITERION NAME- "+jsonResponse.xref.criterion.name.toString()+ " is NOT verified successfully in Sequel Pro database");
						}
						if(row["min_years"].toString().equals(jsonResponse.xref.criterion.min_years.toString())){
							objReportingLog.logInfo("Info", "CRITERION MIN YEARS- "+jsonResponse.xref.criterion.min_years.toString()+ " is verified successfully in Sequel Pro database");
						}else{
							error.add("CRITERION MIN YEARS- "+jsonResponse.xref.criterion.min_years.toString()+ " is NOT verified successfully in Sequel Pro database");
							objReportingLog.logInfo("Error", "CRITERION MIN YEARS- "+jsonResponse.xref.criterion.min_years.toString()+ " is NOT verified successfully in Sequel Pro database");
						}
						if(row["min_referees"].toString().equals(jsonResponse.xref.criterion.min_referees.toString())){
							objReportingLog.logInfo("Info", "CRITERION MIN REFEREES- "+jsonResponse.xref.criterion.min_referees.toString()+ " is verified successfully in Sequel Pro database");
						}else{
							error.add("CRITERION MIN REFEREES- "+jsonResponse.xref.criterion.min_referees.toString()+ " is NOT verified successfully in Sequel Pro database");
							objReportingLog.logInfo("Error", "CRITERION MIN REFEREES- "+jsonResponse.xref.criterion.min_referees.toString()+ " is NOT verified successfully in Sequel Pro database");
						}
					}
				}
				if(jsonResponse.xref!=null){
					int intPeriodType,iRef;
					for(iRef=0;iRef&lt;jsonResponse.xref.referees.size();iRef++){
						if((row["ref_first_name"].toString()+" "+row["ref_last_name"].toString()).equals(jsonResponse.xref.referees[iRef].name.toString())){
							objReportingLog.logInfo("Info", "REFEREE NAME- "+jsonResponse.xref.referees[iRef].name.toString()+ " is verified successfully in Sequel Pro database");
							def strRefereeState
							if(row["ref_state"]==1){
								strRefereeState="INITIAL"
							}else if(row["ref_state"]==2){
								strRefereeState="REQUESTED"	
							}else if(row["ref_state"]==3){
								strRefereeState="ANSWERED"		
							}else if(row["ref_state"]==4){
								strRefereeState="DECLINED"	
							}else if(row["ref_state"]==5){
								strRefereeState="UNOBTAINABLE"	
							}else if(row["ref_state"]==6){
								strRefereeState="ACCESSED"	
							}else if(row["ref_state"]==7){
								strRefereeState="SAVED"	
							}else if(row["ref_state"]==8){
								strRefereeState="STOPPED"	
							}else if(row["ref_state"]==9){
								strRefereeState="PREPOPULATED"	
							}else if(row["ref_state"]==10){
								strRefereeState="DETACHED"	
							}else if(row["ref_state"]==11){
								strRefereeState="STARTED"	
							}else if(row["ref_state"]==12){
								strRefereeState="AGREED"	
							}else if(row["ref_state"]==13){
								strRefereeState="VERIFIED"	
							}else if(row["ref_state"]==14){
								strRefereeState="CONFIRMED"	
							}else{
								error.add("REFEREE STATE "+row["ref_state"]+" NOT FOUND in Json Response");
								objReportingLog.logInfo("Error","REFEREE STATE "+row["ref_state"]+" NOT FOUND in Json Response");
							}
							if(strRefereeState.equalsIgnoreCase(jsonResponse.xref.referees[iRef].status.toString())){
								objReportingLog.logInfo("Info", "REFEREE STATE - "+jsonResponse.xref.referees[iRef].status.toString()+ " is verified successfully in Sequel Pro database");
							}
							if(row["ref_email"].toString().equals(jsonResponse.xref.referees[iRef].email.toString())){
								objReportingLog.logInfo("Info", "REFEREE EMAIL- "+jsonResponse.xref.referees[iRef].email.toString()+ " is verified successfully in Sequel Pro database");
							}
							break;
						}
					}
					if(iRef==jsonResponse.xref.referees.size()){
						error.add("SQL REFEREE NAME- "+row["ref_first_name"].toString()+ " is NOT verified successfully in JSON Response");
						objReportingLog.logInfo("Error", "SQL REFEREE NAME- "+row["ref_first_name"].toString()+ " is NOT verified successfully in JSON Response");
					}
				}
			}else{
				objReportingLog.logInfo("Error", "CHECK ID- "+jsonResponse.id.toString()+ " is NOT found successfully in Sequel Pro database");
				error.add("CHECK ID- "+jsonResponse.id.toString()+ " is NOT found successfully in Sequel Pro database");
			}
			return;
		}	
	}else{
		error.add("No records fetched for query-" +sqlQuery+" in Sequel Pro database");
	}
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4f8d16d4-28cc-44f9-864e-1f0edf3df13c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_CreateXref" searchProperties="true"><con:settings/><con:testStep type="httprequest" name="OpenAPI_CreateXref" id="b4525c1e-573e-47dd-ad44-f9cad8fe3b71"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="bf698cda-d8d1-4025-9c44-8aeabd058859" name="OpenAPI_CreateXref" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/check</con:endpoint><con:request>{
  "role": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Testcase_Variables"].getPropertyValue('Role')}",
  "candidate": {
    "first_name": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Testcase_Variables"].getPropertyValue('Candidate_FirstName')}",
    "last_name": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Testcase_Variables"].getPropertyValue('Candidate_LastName')}",
    "email": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Testcase_Variables"].getPropertyValue('Email')}",
    "phone": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Testcase_Variables"].getPropertyValue('Phone')}"
  },
  "criterion": {
    "id": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Testcase_Variables"].getPropertyValue('Criterion_ID')}",
    "min_referees": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Testcase_Variables"].getPropertyValue('Minimum_Referees')}",
    "note_to_candidate": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Testcase_Variables"].getPropertyValue('Note_To_Candidate')}",
    "note_to_referee": "${=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].testSteps["Testcase_Variables"].getPropertyValue('Note_To_Referee')}"
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_XrefCreation" id="f69287e2-6363-4e3a-b1a2-922531f00888"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
error = [];
def jsonResponse;
strRequestName=objLocalVariablesPath.getPropertyValue("Request_Name");
def responseContent = testRunner.testCase.getTestStepByName(strRequestName).getPropertyValue("response")
if(responseContent!=null){
	jsonResponse = new JsonSlurper().parseText(responseContent);
}else{
	responseContent="NO Response Content since the XREF was NOT created successfully"
}

objLocalVariablesPath.setPropertyValue("Json_Response",responseContent)
def responseStatusHeader=testRunner.testCase.getTestStepByName(strRequestName).testRequest.response.getResponseHeaders()
if(responseStatusHeader["#status#"]==['HTTP/1.1 201 Created']){
	objReportingLog.logInfo("Info","XREF - "+jsonResponse.id+" has been created successfully");
	verifyCheckCreated(jsonResponse)
}else{
	objReportingLog.logInfo("Error","XREF has NOT been created successfully");
	error.add("Response Status is - "+responseStatusHeader["#status#"])
	objLocalVariablesPath.setPropertyValue("Error",error.toString())
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
	objReportingLog.logInfo("Error", " Response error- "+error.toString())
}
assert error.size() == 0

def verifyCheckCreated(def jsonResponse){

	def sql =objUtilityFunctions.setDBConnection();
	def sqlQuery="select integration from xref_check where id='"+jsonResponse.id+"'";
	int intSize=sql.rows(sqlQuery).size();
	if(intSize==1){
		sql.eachRow(sqlQuery){ row ->
			if(row["integration"].toString().equalsIgnoreCase("Open")){
				objReportingLog.logInfo("Info", "Check ID - "+jsonResponse.id+ " is successfully created and verified in Sequel Pro database");
			}else{
				objReportingLog.logInfo("Error", "Check ID - "+jsonResponse.id+ " is NOT successfully created and verified in Sequel Pro database");
				error.add("Check ID - "+jsonResponse.id+ " is NOT successfully created and verified in Sequel Pro database");
			}
			return;
		}	
	}else{
		error.add("No records fetched for query-" +sqlQuery+" in Sequel Pro database");
	}
}	</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4d816954-6329-4461-af5d-9fc496041d7e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_CancelCheck" searchProperties="true"><con:settings/><con:testStep type="groovy" name="modifyEndPoint_CancelCheck" id="c02be6f2-73fc-4a06-813a-b80ead1a6b62"><con:settings/><con:config><script>def localFileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables") 
def strEndPoint=localFileProperties.getPropertyValue("EndPoint")
def strRequestName=localFileProperties.getPropertyValue("Request_Name");
def strCheckID=localFileProperties.getPropertyValue("Check_ID").toString();
def strModifiedEndPoint=strEndPoint+"/"+strCheckID;

testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint(strModifiedEndPoint);</script></con:config></con:testStep><con:testStep type="httprequest" name="OpenAPI_CancelCheck" id="40d56ff1-b275-4745-a7d7-3a954f018ea7"><con:settings/><con:config method="DELETE" xsi:type="con:HttpRequest" id="bf698cda-d8d1-4025-9c44-8aeabd058859" name="OpenAPI_CancelCheck" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/check/153962</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_CheckCancelled" id="4ad740f5-4a3a-4f64-a137-2eed4c68dca3"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")

error = [];
def jsonResponse;
strRequestName=objLocalVariablesPath.getPropertyValue("Request_Name");
strCheckID=objLocalVariablesPath.getPropertyValue("Check_ID");
def responseContent = testRunner.testCase.getTestStepByName(strRequestName).getPropertyValue("response")
if(responseContent!=null){
	jsonResponse = new JsonSlurper().parseText(responseContent);
}else{
	responseContent="NO Response Content since the CHECK ID - "+strCheckID+" was NOT Cancelled successfully"
}

objLocalVariablesPath.setPropertyValue("Json_Response",responseContent)
def responseStatusHeader=testRunner.testCase.getTestStepByName(strRequestName).testRequest.response.getResponseHeaders()
if(responseStatusHeader["#status#"]==['HTTP/1.1 200 OK']){
	objReportingLog.logInfo("Info","XREF has been cancelled successfully");
	verifyCheckDeleted_Stopped(responseContent);
}else if(responseStatusHeader["#status#"]== ['HTTP/1.1 412 Precondition Failed']){
	objReportingLog.logInfo("Error","Check cannot be cancelled when it is already STOPPED");
	error.add("Response Status is - "+responseStatusHeader["#status#"])
	error.add("Check cannot be cancelled when it is already STOPPED");
	objLocalVariablesPath.setPropertyValue("Error",error.toString()+"\nCHECK ID-"&amp;strCheckID);
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
	objReportingLog.logInfo("Error", " Response error- "+error.toString())
}else{
	objReportingLog.logInfo("Error","XREF has NOT been cancelled successfully");
	error.add("Response Status is - "+responseStatusHeader["#status#"])
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
	objReportingLog.logInfo("Error", " Response error- "+error.toString()+"\n"+responseContent.toString())
}
assert error.size() == 0

def verifyCheckDeleted_Stopped(def responseContent){

	def sql =objUtilityFunctions.setDBConnection();
	def sqlQuery="select state from xref_check_xref INNER JOIN xref_check on xref_check_xref.id=xref_check.xref_id where xref_check.id="+strCheckID
	int intSize=sql.rows(sqlQuery).size();
	if(intSize==1){
		sql.eachRow(sqlQuery){ row ->
		if(responseContent.toLowerCase().contains("stopped")){
			if(row["state"]==5){
				objReportingLog.logInfo("Info", "Check ID - "+strCheckID+ " has been STOPPED successfully and verified in Sequel Pro database");
			}else{
				objReportingLog.logInfo("Error", "Check ID - "+strCheckID+ " has NOT been STOPPED successfully and verified in Sequel Pro database");
				error.add("Check ID - "+strCheckID+ " has NOT been STOPPED successfully and verified in Sequel Pro database");
			}	
		}else if(responseContent.toLowerCase().contains("deleted")){
			if(row["state"]==1){
				objReportingLog.logInfo("Info", "Check ID - "+strCheckID+ " has been DELETED successfully and verified in Sequel Pro database");
			}else{
				objReportingLog.logInfo("Error", "Check ID - "+strCheckID+ " has NOT been DELETED successfully and verified in Sequel Pro database");
				error.add("Check ID - "+strCheckID+ " has NOT been DELETED successfully and verified in Sequel Pro database");
			}
		}else{
			objReportingLog.logInfo("Error", "RESPONSE CONTENT - "+responseContent+" does NOT contain DELETED/STOPPED text" );
			error.add("RESPONSE CONTENT - "+responseContent+" does NOT contain DELETED/STOPPED text" );
		}
		return;
		}	
	}else{
		error.add("No records fetched for query-" +sqlQuery+" in Sequel Pro database");
	}
}	
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8c25c173-49ce-460d-ab28-aa323140946d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_RetrieveReport" searchProperties="true"><con:settings/><con:testStep type="groovy" name="modifyEndPoint_RetrieveReport" id="51d962d6-c010-4863-a43b-30ac26ec4e6c"><con:settings/><con:config><script>def localFileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables") 
def strEndPoint=localFileProperties.getPropertyValue("EndPoint")
def strRequestName=localFileProperties.getPropertyValue("Request_Name");
def strReportID=localFileProperties.getPropertyValue("Report_ID").toString();
def strModifiedEndPoint=strEndPoint+"/"+strReportID;

testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint(strModifiedEndPoint);</script></con:config></con:testStep><con:testStep type="httprequest" name="OpenAPI_RetrieveReport" id="5f504cbe-191c-4bfc-ab2f-6630d14dbaa2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="6ca2f563-b5bf-4d5b-84b3-8a8d7eed1815" name="OpenAPI_RetrieveReport" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/check/report/4769401</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_RetrieveReport" id="41224668-1c06-4420-b580-3f1bcf03eb1f"><con:settings/><con:config><script>def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
def strReportID=objLocalVariablesPath.getPropertyValue("Report_ID").toString();
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("REPORT ID",strReportID);
error = []
if(objLocalVariablesPath.getPropertyValue("Error")!=null){
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
}
if(error.size()!=0){
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
}else{
	objReportingLog.logInfo("Info", "Report URL fetched - "+objLocalVariablesPath.getPropertyValue("Json_Response"));
}
assert error.size() == 0</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fa10ece5-30bf-4b03-beef-5c91a5ab7833" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_ListLogs" searchProperties="true"><con:settings/><con:testStep type="httprequest" name="OpenAPI_ListLogs" id="a89bed57-92ad-4022-8fb0-2649a57d1a7c"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="6c3dfbef-19b9-47f0-9fa4-0a98c2d00153" name="OpenAPI_ListLogs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/logs?type=api&amp;limit=5&amp;page=51</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_ListLogs" id="be24604e-8f94-4fb9-85fb-47679c99942a"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
strRequestName=objLocalVariablesPath.getPropertyValue("Request_Name");
def intNumberOfLogsListed=objLocalVariablesPath.getPropertyValue("NumberOfLogs_Listed");

if(intNumberOfLogsListed==null){
	intNumberOfLogsListed=50;
}
blnQueryRun=true; 

boolean blnHasNextPage=true;
int iJson=0,iCounter=1;
def strJsonResponse="========================================= PAGE - 1 =========================================\n";
error = [];
//verify the slurper isn't empty
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("","");
if(objLocalVariablesPath.getPropertyValue("Error")==null){
	if(jsonResponse.pages.total >0){
		objReportingLog.logInfo("", "\n====================================== PAGE - 1 ========================================\n"+jsonResponse.toString());
		strJsonResponse=strJsonResponse+jsonResponse.toString();
		while(blnHasNextPage && iJson<intNumberOfLogsListed.toInteger()){
			if(jsonResponse.pages.links.next.toString()!=""){
				def strEnv=fileProperties.getPropertyValue("Environment");
				testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint("https://api-open-"+strEnv.toLowerCase()+".xref.com"+jsonResponse.pages.links.next.toString());
				testRunner.testCase.getTestStepByName(strRequestName).run(testRunner, context)
				responseContent = testRunner.testCase.getTestStepByName(strRequestName).getPropertyValue("response")
				jsonResponse = new JsonSlurper().parseText(responseContent);
				blnHasNextPage=true;
				iJson=iJson+1;
			}else{
				blnHasNextPage=false;
			}
			iCounter=iCounter+1;
			if(blnHasNextPage && iCounter<=jsonResponse.pages.total+1){
				if(iCounter<jsonResponse.pages.total+1){
					objReportingLog.logInfo("", "\n======================================== PAGE - "+iCounter+" =========================================\n"+jsonResponse.toString());
					strJsonResponse=strJsonResponse+"\n========================================= PAGE - "+iCounter+" ==========================================\n";	
					strJsonResponse=strJsonResponse+jsonResponse.toString();
				}else{
					objReportingLog.logInfo("", "\n==============================================================================================");
					strJsonResponse=strJsonResponse+jsonResponse.toString()+"\n=====================================================================================================\n";	
				}
			}
		}
		objLocalVariablesPath.setPropertyValue("Json_Response",strJsonResponse.toString())
		if(error.size()!=0){
			objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
			objReportingLog.logInfo("Error", " Response error- "+error.toString())
		}
	}else{
		error.add("Total number of pages found in the JSON response is 0");
		objReportingLog.logInfo("Error", "Total number of pages found in the JSON response is 0");
	}	
}else{
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
}
if(error.size()!=0){
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
}
assert error.size() == 0]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ea8924ec-98cd-4cd7-83c8-5d734a802c96" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_OpenAPI_List_LogID" searchProperties="true"><con:settings/><con:testStep type="groovy" name="modifyEndPoint_List_LogID" id="eb26d0e0-bb7c-474a-9c9b-707835a1daa9"><con:settings/><con:config><script>def localFileProperties=testRunner.testCase.testSuite.project.getTestSuiteByName("Driver_TestSuite").getTestCaseByName("Driver_TestCase").getTestStepByName("Testcase_Variables") 
def strEndPoint=localFileProperties.getPropertyValue("EndPoint")
def strRequestName=localFileProperties.getPropertyValue("Request_Name");
def strLogID=localFileProperties.getPropertyValue("Log_ID").toString();
def strModifiedEndPoint=strEndPoint+"/"+strLogID;

testRunner.testCase.getTestStepByName(strRequestName).getTestRequest().setEndpoint(strModifiedEndPoint);</script></con:config></con:testStep><con:testStep type="httprequest" name="OpenAPI_List_LogID" id="1b019cd6-e620-401c-980c-4ceecc75606b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="eb83fa07-5c22-40ec-9789-29397dbb5ae3" name="OpenAPI_List_LogID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlzaGVrLmRoaW5ncmFAeHJlZi5nbG9iYWwiLCJvcmlnX2lhdCI6MTUxMjUxOTk3NSwiYXV0aCI6MSwiZXhwIjoxNTEyNTIzNTc1LCJ1c2VyX2lkIjo0Mjc0MTQsImVtYWlsIjoiYWJoaXNoZWsuZGhpbmdyYUB4cmVmLmdsb2JhbCJ9.a0QzGehNKHDSUl3KIV8D2PQsBPWljne5pysAyKpZ9fM"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-open-dev.xref.com/log/2775</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="verify_List_LogID" id="19bda5fc-7a5e-4c42-96ae-737893f5e552"><con:settings/><con:config><script>def reusableLibraries_TestCase=testRunner.testCase.testSuite.project.testSuites["Reusable_Libraries"].testCases["Reusable_Functions"]
def reportingLogFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Reporting_Log")
reportingLogFunctions_TestStep.run(testRunner, context)
objReportingLog=context.objReportingLog
def utilityFunctions_TestStep = reusableLibraries_TestCase.getTestStepByName("Class_UtilityFunctions")
utilityFunctions_TestStep.run(testRunner, context)
objUtilityFunctions=context.objUtilityFunctions

objLocalVariablesPath = testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Testcase_Variables")
fileProperties=testRunner.testCase.testSuite.project.testSuites["Driver_TestSuite"].testCases["Driver_TestCase"].getTestStepByName("Global_Variables")
def strLogID=localFileProperties.getPropertyValue("Log_ID").toString();
def jsonResponse=objUtilityFunctions.initializeVerifyTestStep("LOG ID",strLogID);
error = []
if(objLocalVariablesPath.getPropertyValue("Error")!=null){
	error.add(objLocalVariablesPath.getPropertyValue("Error"));
}
if(error.size()!=0){
	objLocalVariablesPath.setPropertyValue("Error",error.toString());
	objLocalVariablesPath.setPropertyValue("Testcase_Status","Failed")
}
assert error.size() == 0</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>